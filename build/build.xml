<project name="SalesforceMobileSDK-iOS" basedir="." default="all">
    <property name="artifactsDir" location="artifacts" />
    <property name="deviceBuildName" value="iphoneos" />
    <property name="deviceCompileArguments" value="PLATFORM_NAME=iphoneos" />
    <property name="simulatorBuildName" value="iphonesimulator" />
    <property name="simulatorCompileArguments" value="PLATFORM_NAME=iphonesimulator" />
    <property name="thirdPartyLibDir" location="../external/ThirdPartyDependencies" />
    <property name="sharedResourcesDir" location="../shared/resources" />
    <property name="sdkResourcesBundleName" value="SalesforceSDKResources.bundle" />
    <property name="sharedHybridDir" location="../shared/hybrid" />

    <target name="all" description="Cleans the projects and builds all libraries">
        <antcall target="clean" />
        <antcall target="buildAll" />
        <antcall target="libPackages" />
    </target>

    <target name="buildAll" />

    <target name="libPackages" depends="packageSalesforceAnalytics, packageLumberjack, packageSmartSync, packageSmartStore, packageSalesforceHybridSDK, packageSalesforceSDKCore" />

    <target name="packageLumberjack" depends="buildLumberjack" description="Packages and builds the CocoaLumberjack library.">
        <antcall target="packageLib">
            <param name="projectName" value="Lumberjack" />
            <param name="libName" value="libCocoaLumberjack.a" />
            <param name="headerDir" value="Headers/CocoaLumberjack" />
        </antcall>
    </target>
    
    <target name="buildLumberjack">
        <antcall target="buildLib">
            <param name="projectName" value="Lumberjack" />
            <param name="libName" value="libCocoaLumberjack.a" />
            <param name="headerDir" value="Headers/CocoaLumberjack" />
            <param name="schemeName" value="CocoaLumberjack-iOS-Static" />
        </antcall>
    </target>
    
    <target name="cleanLumberjack" description="Cleans the build artifacts and output of the CocoaLumberjack library.">
        <antcall target="cleanLib">
            <param name="projectName" value="Lumberjack" />
            <param name="libName" value="libCocoaLumberjack.a" />
            <param name="headerDir" value="Headers/CocoaLumberjack" />
            <param name="schemeName" value="CocoaLumberjack-iOS-Static" />
        </antcall>
    </target>
    
    <target name="packageSalesforceHybridSDK" depends="buildSalesforceHybridSDK" description="Packages and builds the Salesforce Hybrid SDK library.">
        <antcall target="packageLib">
            <param name="projectName" value="SalesforceHybridSDK" />
            <param name="libName" value="libSalesforceHybridSDK.a" />
            <param name="headerDir" value="Headers/SalesforceHybridSDK" />
        </antcall>
    </target>
    
    <target name="buildSalesforceHybridSDK">
        <antcall target="buildLib">
            <param name="projectName" value="SalesforceHybridSDK" />
            <param name="libName" value="libSalesforceHybridSDK.a" />
            <param name="headerDir" value="Headers/SalesforceHybridSDK" />
            <param name="schemeName" value="SalesforceHybridSDKStatic" />
        </antcall>
    </target>
    
    <target name="cleanSalesforceHybridSDK" description="Cleans the build artifacts and output of the Salesforce Hybrid SDK library.">
        <antcall target="cleanLib">
            <param name="projectName" value="SalesforceHybridSDK" />
            <param name="libName" value="libSalesforceHybridSDK.a" />
            <param name="headerDir" value="Headers/SalesforceHybridSDK" />
            <param name="schemeName" value="SalesforceHybridSDKStatic" />
        </antcall>
    </target>
    
    <target name="packageSmartSync" depends="buildSmartSync" description="Packages and builds the Salesforce SmartSync library.">
        <antcall target="packageLib">
            <param name="projectName" value="SmartSync" />
            <param name="libName" value="libSmartSync.a" />
            <param name="headerDir" value="Headers/SmartSync" />
        </antcall>
    </target>
    
    <target name="buildSmartSync">
        <antcall target="buildLib">
            <param name="projectName" value="SmartSync" />
            <param name="libName" value="libSmartSync.a" />
            <param name="headerDir" value="Headers/SmartSync" />
            <param name="schemeName" value="SmartSyncStatic" />
        </antcall>
    </target>
    
    <target name="cleanSmartSync" description="Cleans the build artifacts and output of the Salesforce SmartSync library.">
        <antcall target="cleanLib">
            <param name="projectName" value="SmartSync" />
            <param name="libName" value="libSmartSync.a" />
            <param name="headerDir" value="Headers/SmartSync" />
            <param name="schemeName" value="SmartSyncStatic" />
        </antcall>
    </target>
    
    <target name="packageSmartStore" depends="buildSmartStore" description="Packages and builds the Salesforce SmartStore library.">
        <antcall target="packageLib">
            <param name="projectName" value="SmartStore" />
            <param name="libName" value="libSmartStore.a" />
            <param name="headerDir" value="Headers/SmartStore" />
        </antcall>
    </target>
    
    <target name="buildSmartStore">
        <antcall target="buildLib">
            <param name="projectName" value="SmartStore" />
            <param name="libName" value="libSmartStore.a" />
            <param name="headerDir" value="Headers/SmartStore" />
            <param name="schemeName" value="SmartStoreStatic" />
        </antcall>
    </target>
    
    <target name="cleanSmartStore" description="Cleans the build artifacts and output of the Salesforce SmartStore library.">
        <antcall target="cleanLib">
            <param name="projectName" value="SmartStore" />
            <param name="libName" value="libSmartStore.a" />
            <param name="headerDir" value="Headers/SmartStore" />
            <param name="schemeName" value="SmartStoreStatic" />
        </antcall>
    </target>
    
    <target name="packageSalesforceSDKCore" depends="buildSalesforceSDKCore" description="Builds the SalesforceSDKCore library.">
        <antcall target="packageLib">
            <param name="projectName" value="SalesforceSDKCore" />
            <param name="libName" value="libSalesforceSDKCore.a" />
            <param name="headerDir" value="Headers/SalesforceSDKCore" />
        </antcall>
    </target>
    
    <target name="buildSalesforceSDKCore">
        <antcall target="buildLib">
            <param name="projectName" value="SalesforceSDKCore" />
            <param name="libName" value="libSalesforceSDKCore.a" />
            <param name="headerDir" value="Headers/SalesforceSDKCore" />
            <param name="schemeName" value="SalesforceSDKCoreStatic" />
        </antcall>
    </target>
    
    <target name="cleanSalesforceSDKCore" description="Cleans the build artifacts and output of the SalesforceSDKCore library.">
        <antcall target="cleanLib">
            <param name="projectName" value="SalesforceSDKCore" />
            <param name="libName" value="libSalesforceSDKCore.a" />
            <param name="headerDir" value="Headers/SalesforceSDKCore" />
            <param name="schemeName" value="SalesforceSDKCoreStatic" />
        </antcall>
    </target>

    <target name="packageSalesforceAnalytics" depends="buildSalesforceAnalytics" description="Builds the SalesforceAnalytics library.">
        <antcall target="packageLib">
            <param name="projectName" value="SalesforceAnalytics" />
            <param name="libName" value="libSalesforceAnalytics.a" />
            <param name="headerDir" value="Headers/SalesforceAnalytics" />
        </antcall>
    </target>
    
    <target name="buildSalesforceAnalytics">
        <antcall target="buildLib">
            <param name="projectName" value="SalesforceAnalytics" />
            <param name="libName" value="libSalesforceAnalytics.a" />
            <param name="headerDir" value="Headers/SalesforceAnalytics" />
            <param name="schemeName" value="SalesforceAnalyticsStatic" />
        </antcall>
    </target>
    
    <target name="cleanSalesforceAnalytics" description="Cleans the build artifacts and output of the SalesforceAnalytics library.">
        <antcall target="cleanLib">
            <param name="projectName" value="SalesforceAnalytics" />
            <param name="libName" value="libSalesforceAnalytics.a" />
            <param name="headerDir" value="Headers/SalesforceAnalytics" />
            <param name="schemeName" value="SalesforceAnalyticsStatic" />
        </antcall>
    </target>

    <target name="buildLib" description="Builds the Debug and Release candidates for one of the libraries, as defined by the input scheme.">
        <antcall target="buildLibWithConfiguration">
            <param name="buildConfiguration" value="Debug" />
        </antcall>
        <antcall target="buildLibWithConfiguration">
            <param name="buildConfiguration" value="Release" />
        </antcall>
    </target>
    
    <target name="buildLibWithConfiguration">
        <property name="buildConfiguration" value="Release" />
        <property name="baseBuildOutputDir" value="${artifactsDir}/${buildConfiguration}" />
        <mkdir dir="${baseBuildOutputDir}/${deviceBuildName}" />
        <mkdir dir="${baseBuildOutputDir}/${simulatorBuildName}" />

        <!-- Device -->
        <antcall target="compileScheme">
            <param name="sdk" value="${deviceBuildName}" />
            <param name="buildOutputDir" value="${baseBuildOutputDir}/${deviceBuildName}" />
            <param name="action" value="build" />
            <param name="additionalCompileArguments" value="${deviceCompileArguments}" />
        </antcall>

        <!-- Simulator -->
        <antcall target="compileScheme">
            <param name="sdk" value="${simulatorBuildName}" />
            <param name="buildOutputDir" value="${baseBuildOutputDir}/${simulatorBuildName}" />
            <param name="action" value="build" />
            <param name="additionalCompileArguments" value="${simulatorCompileArguments}" />
        </antcall>
    </target>

    <target name="packageLib">
        <antcall target="packageLibWithConfiguration">
            <param name="buildConfiguration" value="Debug" />
        </antcall>
        <antcall target="packageLibWithConfiguration">
            <param name="buildConfiguration" value="Release" />
        </antcall>
    </target>

    <target name="packageLibWithConfiguration">
        <property name="packageOutputDir" value="${artifactsDir}/${buildConfiguration}" />
        <property name="packageProjectDir" value="${packageOutputDir}/${projectName}-${buildConfiguration}" />
        <mkdir dir="${packageProjectDir}" />

        <!-- For header files, we only need the one set.  We'll take the device folder. -->
        <copy todir="${packageProjectDir}/${headerDir}">
            <fileset dir="${packageOutputDir}/${deviceBuildName}/${headerDir}" />
        </copy>
        <antcall target="lipo">
            <param name="lipoLib1" value="${packageOutputDir}/${deviceBuildName}/${libName}" />
            <param name="lipoLib2" value="${packageOutputDir}/${simulatorBuildName}/${libName}" />
            <param name="outputLib" value="${packageProjectDir}/${libName}" />
        </antcall>
        <antcall target="compress">
            <param name="destFile" value="${artifactsDir}/${projectName}-${buildConfiguration}.zip" />
            <param name="baseDir" value="${packageProjectDir}" />
        </antcall>
        <delete dir="${packageProjectDir}" />
    </target>

    <target name="cleanLib">
        <antcall target="cleanLibWithConfiguration">
            <param name="buildConfiguration" value="Debug" />
        </antcall>
        <antcall target="cleanLibWithConfiguration">
            <param name="buildConfiguration" value="Release" />
        </antcall>
    </target>

    <target name="cleanLibWithConfiguration">
        <property name="baseBuildOutputDir" value="${artifactsDir}/${buildConfiguration}" />
        
        <!-- Device -->
        <antcall target="compileScheme">
            <param name="sdk" value="${deviceBuildName}" />
            <param name="buildOutputDir" value="${baseBuildOutputDir}/${deviceBuildName}" />
            <param name="action" value="clean" />
            <param name="additionalCompileArguments" value="${deviceCompileArguments}" />
        </antcall>
        
        <!-- Simulator -->
        <antcall target="compileScheme">
            <param name="sdk" value="${simulatorBuildName}" />
            <param name="buildOutputDir" value="${baseBuildOutputDir}/${simulatorBuildName}" />
            <param name="action" value="clean" />
            <param name="additionalCompileArguments" value="${simulatorCompileArguments}" />
        </antcall>
        
        <delete file="${baseBuildOutputDir}/${deviceBuildName}/${libName}" />
        <delete file="${baseBuildOutputDir}/${simulatorBuildName}/${libName}" />
        <delete dir="${baseBuildOutputDir}/${deviceBuildName}/${headerDir}" />
        <delete dir="${baseBuildOutputDir}/${simulatorBuildName}/${headerDir}" />
        <delete file="${artifactsDir}/${projectName}-${buildConfiguration}.zip" />
    </target>
    
    <target name="initArtifacts">
        <mkdir dir="${artifactsDir}" />
    </target>
    
    <target name="compileScheme" depends="initArtifacts" description="Compiles one of the schemes from the SalesforceMobileSDK workspace.">
        <property name="buildConfiguration" value="Release" />
        
        <echo>Building "${schemeName}" with configuration "${buildConfiguration}" for SDK "${sdk}"</echo>
        
        <exec executable="xcodebuild" failonerror="true" logError="true">
            <arg value="-workspace" />
            <arg file="../SalesforceMobileSDK.xcworkspace" />
            <arg value="-scheme" />
            <arg value="${schemeName}" />
            <arg value="-configuration" />
            <arg value="${buildConfiguration}" />
            <arg value="-sdk" />
            <arg value="${sdk}" />
            <arg value="${action}" />
            <arg value="CONFIGURATION_BUILD_DIR=${buildOutputDir}" />
            <arg value="ONLY_ACTIVE_ARCH=NO" />
            <arg value="${additionalCompileArguments}" />
        </exec>
    </target>
    
    <target name="lipo" description="Lipos lipoLib1 with liboLib2, and stores the result as outputLib.">
        
        <echo>Merging libraries ${lipoLib1} and ${lipoLib2} into ${outputLib}</echo>
        
        <exec executable="lipo" failonerror="true" logError="true">
            <arg value="-create" />
            <arg value="-output" />
            <arg value="${outputLib}" />
            <arg value="${lipoLib1}" />
            <arg value="${lipoLib2}" />
        </exec>
    </target>
    
    <target name="compress">
        <exec executable="ditto">
            <arg value="-k" /> <!-- PKZip format -->
            <arg value="-c" /> <!-- compress -->
            <arg value="--keepParent" />
            <arg value="--norsrc" />
            <arg value="${baseDir}" />
            <arg file="${destFile}" />
        </exec>
    </target>
    
    <target name="clean" description="Cleans the build state." depends="cleanSalesforceAnalytics, cleanLumberjack, cleanSmartSync, cleanSmartStore, cleanSalesforceHybridSDK, cleanSalesforceSDKCore">
        <delete dir="${artifactsDir}" />
    </target>
</project>
