<project name="SalesforceMobileSDK-iOS" basedir="." default="all">
    <property name="artifactsDir" location="artifacts" />
    <property name="deviceBuildName" value="iphoneos" />
    <property name="simulatorBuildName" value="iphonesimulator" />
    <property name="thirdPartyLibDir" location="../external/ThirdPartyDependencies" />
    <property name="sharedResourcesDir" location="../shared/resources" />
    <property name="sdkResourcesBundleName" value="SalesforceSDKResources.bundle" />
    <property name="baseTemplateFilesDir" location="app_template_files" />
    <property name="srcAppCreationScript" value="${baseTemplateFilesDir}/createApp.sh.base" />
    <property name="destAppCreationScriptName" value="createApp.sh" />
    <property name="destHybridTemplateDir" value="${artifactsDir}/HybridAppTemplate" />
    <property name="destHybridTemplateName" value="__HybridTemplateAppName__" />
    <property name="destNativeTemplateDir" value="${artifactsDir}/NativeAppTemplate" />
    <property name="destNativeTemplateName" value="__NativeTemplateAppName__" />
    <property name="sharedHybridDir" location="../shared/hybrid" />
    <property name="cordovaCaptureBundleName" value="Capture.bundle" />
    <property name="cordovaLibraryName" value="cordova-2.3.0.js" />
    <property name="cordovaConfigXmlName" value="config.xml" />
    
    <target name="all" description="Cleans the projects and builds all libraries and templates">
        <antcall target="clean" />
        <antcall target="buildAll" />
    </target>
    
    <target name="buildAll" depends="nativeAppTemplate, hybridAppTemplate" />
    
    <target name="libPackages" depends="packageSalesforceNativeSDK, packageSalesforceHybridSDK, packageSalesforceNetworkSDK, packageMKNetworkKit, packageSalesforceSDKCore, packageSalesforceOAuth, packageCordova" />
    
    <target name="nativeAppTemplate" depends="libPackages, nativeAppTemplateShell" description="Creates the native app template">
        <property name="nativeTemplateDependenciesDir" value="${destNativeTemplateDir}/${destNativeTemplateName}/${destNativeTemplateName}/Dependencies" />
        
        <!-- Copy in the third party dependencies -->
        <copy todir="${nativeTemplateDependenciesDir}/SalesforceCommonUtils">
            <fileset dir="${thirdPartyLibDir}/SalesforceCommonUtils" />
        </copy>
        <copy todir="${nativeTemplateDependenciesDir}/openssl">
            <fileset dir="${thirdPartyLibDir}/openssl">
                <exclude name="openssl/**" />
            </fileset>
        </copy>
        <copy todir="${nativeTemplateDependenciesDir}/sqlcipher">
            <fileset dir="${thirdPartyLibDir}/sqlcipher" />
        </copy>
        
        <!-- Add the SDK dependencies -->
        <exec executable="unzip" failonerror="true" logError="true">
            <arg value="-d" />
            <arg file="${nativeTemplateDependenciesDir}" />
            <arg file="${artifactsDir}/SalesforceNativeSDK-Debug.zip" />
        </exec>
        <exec executable="unzip" failonerror="true" logError="true">
            <arg value="-d" />
            <arg file="${nativeTemplateDependenciesDir}" />
            <arg file="${artifactsDir}/SalesforceOAuth-Debug.zip" />
        </exec>
        <exec executable="unzip" failonerror="true" logError="true">
            <arg value="-d" />
            <arg file="${nativeTemplateDependenciesDir}" />
            <arg file="${artifactsDir}/SalesforceSDKCore-Debug.zip" />
        </exec>
        
        <exec executable="unzip" failonerror="true" logError="true">
            <arg value="-d" />
            <arg file="${nativeTemplateDependenciesDir}" />
            <arg file="${artifactsDir}/SalesforceNetworkSDK-Debug.zip" />
        </exec>

        <exec executable="unzip" failonerror="true" logError="true">
            <arg value="-d" />
            <arg file="${nativeTemplateDependenciesDir}" />
            <arg file="${artifactsDir}/MKNetworkKit-iOS-Debug.zip" />
        </exec>

        <!-- SDK resources -->
        <copy todir="${destNativeTemplateDir}/${destNativeTemplateName}/${destNativeTemplateName}/${sdkResourcesBundleName}">
            <fileset dir="${sharedResourcesDir}/${sdkResourcesBundleName}" />
        </copy>
        
    </target>
    
    <target name="nativeAppTemplateShell" description="Creates the basic native template shell, minus dependenies.  NB: npm package will use this.">
        <property name="srcNativeTemplateFilesDir" value="${baseTemplateFilesDir}/__NativeTemplateAppFiles__" />
        
        <!-- Copy over the native template -->
        <delete dir="${destNativeTemplateDir}" />
        <mkdir dir="${destNativeTemplateDir}" />
        <copy todir="${destNativeTemplateDir}/${destNativeTemplateName}">
            <fileset dir="${srcNativeTemplateFilesDir}" />
        </copy>
        
        <!-- App generator script -->
        <copy file="${srcAppCreationScript}" tofile="${destNativeTemplateDir}/${destAppCreationScriptName}" />
        <chmod file="${destNativeTemplateDir}/${destAppCreationScriptName}" perm="755" />
    </target>
    
    <target name="hybridAppTemplate" depends="libPackages, hybridAppTemplateShell" description="Creates the hybrid app template">
        <property name="hybridTemplateDependenciesDir" value="${destHybridTemplateDir}/${destHybridTemplateName}/${destHybridTemplateName}/Dependencies" />
        <property name="wwwDir" value="${destHybridTemplateDir}/${destHybridTemplateName}/${destHybridTemplateName}/www" />
        <property name="externalSharedDir" location="../external/shared" />
        
        <!-- Copy in the third party dependencies -->
        <copy todir="${hybridTemplateDependenciesDir}/SalesforceCommonUtils">
            <fileset dir="${thirdPartyLibDir}/SalesforceCommonUtils" />
        </copy>
        <copy todir="${hybridTemplateDependenciesDir}/openssl">
            <fileset dir="${thirdPartyLibDir}/openssl">
                <exclude name="openssl/**" />
            </fileset>
        </copy>
        <copy todir="${hybridTemplateDependenciesDir}/sqlcipher">
            <fileset dir="${thirdPartyLibDir}/sqlcipher" />
        </copy>
        
        <!-- Add the SDK dependencies -->
        <exec executable="unzip" failonerror="true" logError="true">
            <arg value="-d" />
            <arg file="${hybridTemplateDependenciesDir}" />
            <arg file="${artifactsDir}/Cordova-Debug.zip" />
        </exec>
        <exec executable="unzip" failonerror="true" logError="true">
            <arg value="-d" />
            <arg file="${hybridTemplateDependenciesDir}" />
            <arg file="${artifactsDir}/SalesforceHybridSDK-Debug.zip" />
        </exec>
        <exec executable="unzip" failonerror="true" logError="true">
            <arg value="-d" />
            <arg file="${hybridTemplateDependenciesDir}" />
            <arg file="${artifactsDir}/SalesforceOAuth-Debug.zip" />
        </exec>
        <exec executable="unzip" failonerror="true" logError="true">
            <arg value="-d" />
            <arg file="${hybridTemplateDependenciesDir}" />
            <arg file="${artifactsDir}/SalesforceSDKCore-Debug.zip" />
        </exec>
        
        <!-- SDK and Cordova resources -->
        <copy todir="${destHybridTemplateDir}/${destHybridTemplateName}/${destHybridTemplateName}/${sdkResourcesBundleName}">
            <fileset dir="${sharedResourcesDir}/${sdkResourcesBundleName}" />
        </copy>
        <copy file="${sharedHybridDir}/${cordovaConfigXmlName}" todir="${destHybridTemplateDir}/${destHybridTemplateName}/${destHybridTemplateName}" />
        
        <!-- Hybrid www/ resources -->
        <copy todir="${wwwDir}">
            <fileset dir="${externalSharedDir}/SampleApps/contactexplorer" />
        </copy>
        <copy file="${sharedHybridDir}/${cordovaLibraryName}" todir="${wwwDir}" />
        <copy file="${externalSharedDir}/libs/cordova.force.js" todir="${wwwDir}" />
        <copy file="${externalSharedDir}/libs/smartsync.js" todir="${wwwDir}" />
        <copy file="${externalSharedDir}/libs/forcetk.mobilesdk.js" todir="${wwwDir}" />
        <copy todir="${wwwDir}/jquery">
            <fileset dir="${externalSharedDir}/external/jquery" />
        </copy>
        <copy todir="${wwwDir}/backbone">
            <fileset dir="${externalSharedDir}/external/backbone" />
        </copy>
    </target>
    
    <target name="hybridAppTemplateShell" description="Creates the basic hybrid template shell, minus dependenies.  NB: npm package will use this.">
        <property name="srcHybridTemplateFilesDir" value="${baseTemplateFilesDir}/__HybridTemplateAppFiles__" />
        
        <!-- Copy over the hybrid template -->
        <delete dir="${destHybridTemplateDir}" />
        <mkdir dir="${destHybridTemplateDir}" />
        <copy todir="${destHybridTemplateDir}/${destHybridTemplateName}">
            <fileset dir="${srcHybridTemplateFilesDir}" />
        </copy>
        
        <!-- App generator script -->
        <copy file="${srcAppCreationScript}" tofile="${destHybridTemplateDir}/${destAppCreationScriptName}" />
        <chmod file="${destHybridTemplateDir}/${destAppCreationScriptName}" perm="755" />
    </target>
    
    <target name="packageCordova" depends="buildCordova" description="Packages and builds the Cordova library.">
        <antcall target="packageLib">
            <param name="projectName" value="Cordova" />
            <param name="libName" value="libCordova.a" />
            <param name="headerDir" value="include/Cordova" />
        </antcall>
    </target>
    
    <target name="buildCordova">
        <antcall target="buildLib">
            <param name="projectName" value="Cordova" />
            <param name="libName" value="libCordova.a" />
            <param name="headerDir" value="include/Cordova" />
            <param name="schemeName" value="CordovaLib" />
        </antcall>
    </target>
    
    <target name="cleanCordova" description="Cleans the build artifacts and output of the Cordova library.">
        <antcall target="cleanLib">
            <param name="projectName" value="Cordova" />
            <param name="libName" value="libCordova.a" />
            <param name="headerDir" value="include/Cordova" />
            <param name="schemeName" value="CordovaLib" />
        </antcall>
    </target>
    
    <target name="packageSalesforceHybridSDK" depends="buildSalesforceHybridSDK" description="Packages and builds the Salesforce Hybrid SDK library.">
        <antcall target="packageLib">
            <param name="projectName" value="SalesforceHybridSDK" />
            <param name="libName" value="libSalesforceHybridSDK.a" />
            <param name="headerDir" value="Headers/SalesforceHybridSDK" />
        </antcall>
    </target>
    
    <target name="buildSalesforceHybridSDK">
        <antcall target="buildLib">
            <param name="projectName" value="SalesforceHybridSDK" />
            <param name="libName" value="libSalesforceHybridSDK.a" />
            <param name="headerDir" value="Headers/SalesforceHybridSDK" />
            <param name="schemeName" value="SalesforceHybridSDK" />
        </antcall>
    </target>
    
    <target name="cleanSalesforceHybridSDK" description="Cleans the build artifacts and output of the Salesforce Hybrid SDK library.">
        <antcall target="cleanLib">
            <param name="projectName" value="SalesforceHybridSDK" />
            <param name="libName" value="libSalesforceHybridSDK.a" />
            <param name="headerDir" value="Headers/SalesforceHybridSDK" />
            <param name="schemeName" value="SalesforceHybridSDK" />
        </antcall>
    </target>
    
    <target name="packageSalesforceNativeSDK" depends="buildSalesforceNativeSDK" description="Builds the Salesforce Native SDK library.">
        <antcall target="packageLib">
            <param name="projectName" value="SalesforceNativeSDK" />
            <param name="libName" value="libSalesforceNativeSDK.a" />
            <param name="headerDir" value="Headers/SalesforceNativeSDK" />
        </antcall>
    </target>
    
    <target name="buildSalesforceNativeSDK">
        <antcall target="buildLib">
            <param name="projectName" value="SalesforceNativeSDK" />
            <param name="libName" value="libSalesforceNativeSDK.a" />
            <param name="headerDir" value="Headers/SalesforceNativeSDK" />
            <param name="schemeName" value="SalesforceNativeSDK" />
        </antcall>
    </target>
    
    <target name="cleanSalesforceNativeSDK" description="Cleans the build artifacts and output of the Salesforce Native SDK library.">
        <antcall target="cleanLib">
            <param name="projectName" value="SalesforceNativeSDK" />
            <param name="libName" value="libSalesforceNativeSDK.a" />
            <param name="headerDir" value="Headers/SalesforceNativeSDK" />
            <param name="schemeName" value="SalesforceNativeSDK" />
        </antcall>
    </target>
    
    <target name="packageSalesforceOAuth" depends="buildSalesforceOAuth" description="Builds the Salesforce OAuth library.">
        <antcall target="packageLib">
            <param name="projectName" value="SalesforceOAuth" />
            <param name="libName" value="libSalesforceOAuth.a" />
            <param name="headerDir" value="Headers/SalesforceOAuth" />
        </antcall>
    </target>
    
    <target name="buildSalesforceOAuth">
        <antcall target="buildLib">
            <param name="projectName" value="SalesforceOAuth" />
            <param name="libName" value="libSalesforceOAuth.a" />
            <param name="headerDir" value="Headers/SalesforceOAuth" />
            <param name="schemeName" value="SalesforceOAuth" />
        </antcall>
    </target>
    
    <target name="cleanSalesforceOAuth" description="Cleans the build artifacts and output of the Salesforce OAuth library.">
        <antcall target="cleanLib">
            <param name="projectName" value="SalesforceOAuth" />
            <param name="libName" value="libSalesforceOAuth.a" />
            <param name="headerDir" value="Headers/SalesforceOAuth" />
            <param name="schemeName" value="SalesforceOAuth" />
        </antcall>
    </target>
    
    <target name="packageSalesforceSDKCore" depends="buildSalesforceSDKCore" description="Builds the Salesforce SDK Core library.">
        <antcall target="packageLib">
            <param name="projectName" value="SalesforceSDKCore" />
            <param name="libName" value="libSalesforceSDKCore.a" />
            <param name="headerDir" value="Headers/SalesforceSDKCore" />
        </antcall>
    </target>
    
    <target name="buildSalesforceSDKCore">
        <antcall target="buildLib">
            <param name="projectName" value="SalesforceSDKCore" />
            <param name="libName" value="libSalesforceSDKCore.a" />
            <param name="headerDir" value="Headers/SalesforceSDKCore" />
            <param name="schemeName" value="SalesforceSDKCore" />
        </antcall>
    </target>
    
    <target name="cleanSalesforceSDKCore" description="Cleans the build artifacts and output of the Salesforce SDK Core library.">
        <antcall target="cleanLib">
            <param name="projectName" value="SalesforceSDKCore" />
            <param name="libName" value="libSalesforceSDKCore.a" />
            <param name="headerDir" value="Headers/SalesforceSDKCore" />
            <param name="schemeName" value="SalesforceSDKCore" />
        </antcall>
    </target>
    
    <target name="packageSalesforceNetworkSDK" depends="buildSalesforceNetworkSDK" description="Builds the Salesforce Network SDK library.">
        <antcall target="packageLib">
            <param name="projectName" value="SalesforceNetworkSDK" />
            <param name="libName" value="libSalesforceNetworkSDK.a" />
            <param name="headerDir" value="Headers/SalesforceNetworkSDK" />
        </antcall>
    </target>
    
    <target name="buildSalesforceNetworkSDK">
        <antcall target="buildLib">
            <param name="projectName" value="SalesforceNetworkSDK" />
            <param name="libName" value="libSalesforceNetworkSDK.a" />
            <param name="headerDir" value="Headers/SalesforceNetworkSDK" />
            <param name="schemeName" value="SalesforceNetworkSDK" />
        </antcall>
    </target>
    
    <target name="cleanSalesforceNetworkSDK" description="Cleans the build artifacts and output of the Salesforce Network SDK library.">
        <antcall target="cleanLib">
            <param name="projectName" value="SalesforceNetworkSDK" />
            <param name="libName" value="libSalesforceNetworkSDK.a" />
            <param name="headerDir" value="Headers/SalesforceNetworkSDK" />
            <param name="schemeName" value="SalesforceNetworkSDK" />
        </antcall>
    </target>
    
    <target name="packageMKNetworkKit" depends="buildMKNetworkKit" description="Builds the MKNetworkKit library.">
        <antcall target="packageLib">
            <param name="projectName" value="MKNetworkKit-iOS" />
            <param name="libName" value="libMKNetworkKit-iOS.a" />
            <param name="headerDir" value="Headers/MKNetworkKit-iOS" />
        </antcall>
    </target>
    
    <target name="buildMKNetworkKit">
        <antcall target="buildLib">
            <param name="projectName" value="MKNetworkKit-iOS" />
            <param name="libName" value="libMKNetworkKit-iOS.a" />
            <param name="headerDir" value="Headers/MKNetworkKit-iOS" />
            <param name="schemeName" value="MKNetworkKit-iOS" />
        </antcall>
    </target>
    
    <target name="cleanMKNetworkKit" description="Cleans the build artifacts and output of the MKNetworkKit library.">
        <antcall target="cleanLib">
            <param name="projectName" value="MKNetworkKit-iOS" />
            <param name="libName" value="libMKNetworkKit-iOS.a" />
            <param name="headerDir" value="Headers/MKNetworkKit-iOS" />
            <param name="schemeName" value="MKNetworkKit-iOS" />
        </antcall>
    </target>
    
    <target name="buildLib" description="Builds the Debug and Release candidates for one of the libraries, as defined by the input scheme.">
        <antcall target="buildLibWithConfiguration">
            <param name="buildConfiguration" value="Debug" />
        </antcall>
        <antcall target="buildLibWithConfiguration">
            <param name="buildConfiguration" value="Release" />
        </antcall>
    </target>
    
    <target name="buildLibWithConfiguration">
        <property name="buildConfiguration" value="Release" />
        <property name="baseBuildOutputDir" value="${artifactsDir}/${buildConfiguration}" />
        
        <mkdir dir="${baseBuildOutputDir}/${deviceBuildName}" />
        <mkdir dir="${baseBuildOutputDir}/${simulatorBuildName}" />
        
        <!-- Device -->
        <antcall target="compileScheme">
            <param name="sdk" value="${deviceBuildName}" />
            <param name="buildOutputDir" value="${baseBuildOutputDir}/${deviceBuildName}" />
            <param name="action" value="build" />
        </antcall>
        
        <!-- Simulator -->
        <antcall target="compileScheme">
            <param name="sdk" value="${simulatorBuildName}" />
            <param name="buildOutputDir" value="${baseBuildOutputDir}/${simulatorBuildName}" />
            <param name="action" value="build" />
        </antcall>

    </target>
    
    <target name="packageLib">
        <antcall target="packageLibWithConfiguration">
            <param name="buildConfiguration" value="Debug" />
        </antcall>
        <antcall target="packageLibWithConfiguration">
            <param name="buildConfiguration" value="Release" />
        </antcall>
    </target>
    
    <target name="packageLibWithConfiguration">
        <property name="packageOutputDir" value="${artifactsDir}/${buildConfiguration}" />
        <property name="packageProjectDir" value="${packageOutputDir}/${projectName}" />
        
        <mkdir dir="${packageProjectDir}" />
        
        <!-- For header files, we only need the one set.  We'll take the device folder. -->
        <copy todir="${packageProjectDir}/${headerDir}">
            <fileset dir="${packageOutputDir}/${deviceBuildName}/${headerDir}" />
        </copy>
        
        <antcall target="lipo">
            <param name="lipoLib1" value="${packageOutputDir}/${deviceBuildName}/${libName}" />
            <param name="lipoLib2" value="${packageOutputDir}/${simulatorBuildName}/${libName}" />
            <param name="outputLib" value="${packageProjectDir}/${libName}" />
        </antcall>
        
        <antcall target="compress">
            <param name="destFile" value="${artifactsDir}/${projectName}-${buildConfiguration}.zip" />
            <param name="baseDir" value="${packageProjectDir}" />
        </antcall>
        
        <delete dir="${packageProjectDir}" />
    </target>
    
    <target name="cleanLib">
        <antcall target="cleanLibWithConfiguration">
            <param name="buildConfiguration" value="Debug" />
        </antcall>
        <antcall target="cleanLibWithConfiguration">
            <param name="buildConfiguration" value="Release" />
        </antcall>
    </target>
    
    <target name="cleanLibWithConfiguration">
        <property name="baseBuildOutputDir" value="${artifactsDir}/${buildConfiguration}" />
        
        <!-- Device -->
        <antcall target="compileScheme">
            <param name="sdk" value="${deviceBuildName}" />
            <param name="buildOutputDir" value="${baseBuildOutputDir}/${deviceBuildName}" />
            <param name="action" value="clean" />
        </antcall>
        
        <!-- Simulator -->
        <antcall target="compileScheme">
            <param name="sdk" value="${simulatorBuildName}" />
            <param name="buildOutputDir" value="${baseBuildOutputDir}/${simulatorBuildName}" />
            <param name="action" value="clean" />
        </antcall>
        
        <delete file="${baseBuildOutputDir}/${deviceBuildName}/${libName}" />
        <delete file="${baseBuildOutputDir}/${simulatorBuildName}/${libName}" />
        <delete dir="${baseBuildOutputDir}/${deviceBuildName}/${headerDir}" />
        <delete dir="${baseBuildOutputDir}/${simulatorBuildName}/${headerDir}" />
        <delete file="${artifactsDir}/${projectName}-${buildConfiguration}.zip" />
        
    </target>
    
    <target name="initArtifacts">
        <mkdir dir="${artifactsDir}" />
    </target>
    
    <target name="compileScheme" depends="initArtifacts" description="Compiles one of the schemes from the SalesforceMobileSDK workspace.">
        <property name="buildConfiguration" value="Release" />
        
        <echo>Building "${schemeName}" with configuration "${buildConfiguration}" for SDK "${sdk}"</echo>
        
        <exec executable="xcodebuild" failonerror="true" logError="true">
            <arg value="-workspace" />
            <arg file="../SalesforceMobileSDK.xcworkspace" />
            <arg value="-scheme" />
            <arg value="${schemeName}" />
            <arg value="-configuration" />
            <arg value="${buildConfiguration}" />
            <arg value="-sdk" />
            <arg value="${sdk}" />
            <arg value="${action}" />
            <arg value="CONFIGURATION_BUILD_DIR=${buildOutputDir}" />
            <arg value="ONLY_ACTIVE_ARCH=NO" />
        </exec>
    </target>
    
    <target name="lipo" description="Lipos lipoLib1 with liboLib2, and stores the result as outputLib.">
        
        <echo>Merging libraries ${lipoLib1} and ${lipoLib2} into ${outputLib}</echo>
        
        <exec executable="lipo" failonerror="true" logError="true">
            <arg value="-create" />
            <arg value="-output" />
            <arg value="${outputLib}" />
            <arg value="${lipoLib1}" />
            <arg value="${lipoLib2}" />
        </exec>
    </target>
    
    <target name="compress">
        <exec executable="ditto">
            <arg value="-k" /> <!-- PKZip format -->
            <arg value="-c" /> <!-- compress -->
            <arg value="--keepParent" />
            <arg value="--norsrc" />
            <arg value="${baseDir}" />
            <arg file="${destFile}" />
        </exec>
    </target>
    
    <target name="clean" description="Cleans the build state." depends="cleanCordova, cleanSalesforceHybridSDK, cleanSalesforceNativeSDK, cleanSalesforceNetworkSDK, cleanMKNetworkKit, cleanSalesforceOAuth, cleanSalesforceSDKCore">
        <delete dir="${artifactsDir}" />
    </target>
</project>
