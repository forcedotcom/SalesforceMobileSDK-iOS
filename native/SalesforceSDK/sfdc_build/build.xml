<project name="SalesforceSDK" default="all">
    <import file="../../../shared/build.xml"/>



    <property environment="env"/>
    <property id="target.name" name="target.name" value="${ant.project.name}"/>
    <property name="project.dir" value=".."/>
    <property name="artifacts.dir" location="artifacts"/>
    <property name="dependency.dir" value="../../dependencies"/>
    <property name="dist.dir" location="../../../dist"/>

      
    <property id="platform.iphoneos" name="platform.iphoneos" value="iphoneos"/>
    <property id="platform.iphonesimulator" name="platform.iphonesimulator" value="iphonesimulator"/>

    <property id="sdk.iphoneos" name="sdk.iphoneos" value="${platform.iphoneos}"/>
    <property id="sdk.iphonesimulator" name="sdk.iphonesimulator" value="${platform.iphonesimulator}"/>

    <property id="configuration.debug" name="configuration.debug" value="Debug"/>
    <property id="configuration.release" name="configuration.release" value="Release"/>

    <!-- main -->
    <target name="pre"  
	depends="initArtifacts,ensureDependencies"/>

    <target name="initArtifacts">
        <mkdir dir="${artifacts.dir}"/>
        <mkdir dir="${dependency.dir}" />
    </target>

	<target name="ensureDependencies"
		depends="iOSShared.dependency.restkit,
                 iOSShared.dependency.oauth,
                 iOSShared.dependency.salesforcecommonutils,
                 iOSShared.dependency.openssl,
                 iOSShared.dependency.sqlcipher" />

	<target name="cleanDependencies"
		depends="iOSShared.dependency.restkit.clean,
                 iOSShared.dependency.oauth.clean,
                 iOSShared.dependency.salesforcecommonutils.clean,
                 iOSShared.dependency.sqlcipher.clean">
		<delete dir="${dependency.dir}"/>
	</target>
	
    <target name="all" depends="pre,utest,buildDist" description="do it all">
   </target>

	<target name="buildDist" depends="pre" description="build debug and release zips">
		<antcall target="compileDebug" />
		<antcall target="compileRelease" />
		<delete dir="${project.dir}/build"/>
	</target>

   <target name="install" depends="pre" description="create fresh install artifacts" >
      <antcall target="compileDebug" />
      <delete dir="${project.dir}/build"/>
   </target>

    <target name="build" description="builds main artifacts"
	depends="pre" >
        <antcall target="compileDebug"/>
        <delete dir="${project.dir}/build"/>
    </target>

    <target name="utest" depends="pre"
	 description="runs unit tests in simulator">
        
        <!-- get the latest iphonesimulator location -->
        <exec executable="xcodebuild" outputproperty="latestSimSDKPath">
            <arg line="xcodebuild -version -sdk iphonesimulator Path"/>
        </exec>
        
        <antcall target="runTestTarget">
            <param name="sdkPath" value="${latestSimSDKPath}" />
        </antcall>
    </target>
    
    <target name="runTestTarget" description="build and run test target" >
        <echo message="sdkPath is: ${sdkPath}" />
        
        <exec executable="mktemp" outputproperty="tmp_home">
            <arg value="-d"/> <!-- create a temp _d_irectory -->
            <arg value="-t"/> <!-- template -->
            <arg value="unittests"/>
        </exec>
        <echo message="Created temp Home at ${tmp_home}"/>
        
        <echo message="Stopping any stale securityd ..."/>
        <exec failonerror="false" executable="launchctl">
            <arg line="remove RunIPhoneLaunchDaemons"/>
        </exec>
        
        <echo message="Starting securityd ... "/>
        <!-- some daemons are necessary for the iPhone to work, e.g. keychain -->
        <exec failonerror="true" executable="launchctl">
            <arg value="submit"/>
            <arg value="-l"/>
            <arg value="RunIPhoneLaunchDaemons"/>
            <arg value="--"/>
            <arg file="${basedir}/RunIPhoneLaunchDaemons.sh"/>
            <arg value="${sdkPath}"/> <!-- $IPHONE_SIMULATOR_ROOT -->
            <arg value="${tmp_home}"/> <!-- $CFFIXED_USER_HOME -->
        </exec>
       
		<delete dir="${artifacts.dir}/BuildProducts" />
		<mkdir dir="${artifacts.dir}/BuildProducts/coverage" />
 
        <!-- build and run the actual test target -->
        <exec executable="xcodebuild" failonerror="false" resultproperty="utestResult" >
            <arg line="-project &quot;${project.dir}/${target.name}.xcodeproj&quot; -target SalesforceSDKTests -configuration Debug CONFIGURATION_BUILD_DIR=&quot;${artifacts.dir}/BuildProducts&quot; -sdk iphonesimulator build" />
        </exec>
       		
		<!-- gcda coverage files are now output to i${artifacts.dir}/BuildProducts/coverage -->
		<antcall target="iOSShared.covreport_text">
			<param name="inputPath" value="${artifacts.dir}/BuildProducts/coverage" />
			<param name="outputPath" value="${artifacts.dir}" />
			<param name="rootPath" value="${artifacts.dir}/../.." />
			<param name="excludePattern" value="SalesforceSDKTests/.*" />
		</antcall> 
		<antcall target="iOSShared.covreport">
			<param name="inputPath" value="${artifacts.dir}/BuildProducts/coverage" />
			<param name="outputPath" value="${artifacts.dir}" />
			<param name="rootPath" value="${artifacts.dir}/../.." />
			<param name="excludePattern" value="SalesforceSDKTests/.*" />
		</antcall>
        
        <echo message="Stopping securityd ..."/>
        <exec failonerror="false" executable="launchctl">
            <arg line="remove RunIPhoneLaunchDaemons"/>
        </exec>
        
		<!-- verify that the utestResult is zero (no error)
		We do this AFTER stopping securityd, exiting app -->
		<fail message="Unit tests failed with error: '${utestResult}'">
			<condition>
				<not>
					<equals arg1="${utestResult}" arg2="0" />
				</not>
			</condition>
		</fail>
    </target>
    
    <target name="compileDebug" depends="pre">
        <antcall target="iOSShared.compile">
            <param name="install_path" value="${artifacts.dir}/${target.name}"/>
            <param name="configuration" value="${configuration.debug}"/>
            <param name="sdk" refid="platform.iphoneos"/>
            <param name="target" value="SalesforceSDK"/>
            <param name="action" value="install"/>
        </antcall>

        <antcall target="iOSShared.compile">
            <param name="install_path" value="${artifacts.dir}/Simulator"/>
            <param name="configuration" value="${configuration.debug}"/>
            <param name="sdk" refid="platform.iphonesimulator"/>
            <param name="target" value="SalesforceSDK"/>
            <param name="action" value="install"/>
        </antcall>

        <antcall target="iOSShared.lipo">
            <param name="libname" value="libSalesforceSDK.a"/>
        </antcall>

        <delete dir="${artifacts.dir}/Simulator"/>

        <antcall target="iOSShared.compress">
            <param name="destfile" value="${artifacts.dir}/${target.name}-Debug.zip"/>
            <param name="basedir" value="${artifacts.dir}/${target.name}"/>
        </antcall>

		<!-- Copy the zip product to the distribution dir -->
		<copy todir="${dist.dir}/${target.name}"
		    file="${artifacts.dir}/${target.name}-Debug.zip" />
		
        <delete dir="${artifacts.dir}/${target.name}"/>
    </target>

    <target name="compileRelease" depends="pre" >
        <antcall target="iOSShared.compile">
            <param name="install_path" value="${artifacts.dir}/${target.name}"/>
            <param name="configuration" value="${configuration.release}"/>
            <param name="sdk" refid="platform.iphoneos"/>
            <param name="target" value="SalesforceSDK"/>
            <param name="action" value="install"/>
        </antcall>

        <!-- Copy the documentation -->
        <copy todir="${artifacts.dir}/${target.name}/Documentation">
            <fileset dir="${project.dir}/Documentation" />
        </copy>

        <antcall target="iOSShared.compress">
            <param name="destfile" value="${artifacts.dir}/${target.name}-Release.zip"/>
            <param name="basedir" value="${artifacts.dir}/${target.name}"/>
        </antcall>

		<!-- Copy the zip product to the distribution dir -->
		<copy todir="${dist.dir}/${target.name}"
		    file="${artifacts.dir}/${target.name}-Release.zip" />
		
        <delete dir="${artifacts.dir}/${target.name}"/>
    </target>



	<target name="documentation.archive" >
		<!-- Copy the documentation out to the Artifacts root directory before we delete it -->
        <delete dir="${project.dir}/Documentation" failonerror="false"/>
        <copy todir="${project.dir}/Documentation">
            <fileset dir="${artifacts.dir}/${target.name}/Documentation"/>
        </copy>
	</target>
	
    <target name="documentation.generate">
        <antcall target="iOSShared.appledocDocumentation">
            <param name="source" value="${artifacts.dir}/${target.name}/include"/>
            <param name="output" value="${artifacts.dir}/${target.name}/Documentation"/>
            <param name="additionalOptions" value="--docset-feed-url ${env.JOB_URL}lastSuccessfulBuild/artifact/artifacts/Release/Documentation/publish/%DOCSETATOMFILENAME --docset-package-url ${env.JOB_URL}lastSuccessfulBuild/artifact/artifacts/Release/Documentation/publish/%DOCSETPACKAGEFILENAME AppledocSettings-Docset.plist"/>
        </antcall>
        <antcall target="iOSShared.appledocDocumentation">
            <param name="source" value="${artifacts.dir}/${target.name}/include"/>
            <param name="output" value="${artifacts.dir}/${target.name}/Documentation"/>
            <param name="additionalOptions" value="AppledocSettings-HTML.plist"/>
        </antcall>
    </target>

 
    <target name="clean">
        <delete dir="${artifacts.dir}" failonerror="false" />
        <delete dir="${dist.dir}/${target.name}" failonerror="false" />
    </target>

    <target name="clean.full"
        depends="clean, cleanDependencies">

    </target>

</project>
