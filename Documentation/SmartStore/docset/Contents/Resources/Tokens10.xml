<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFSmartStore.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFSmartStore</TokenIdentifier>
			<Abstract type="html">The columns of a soup table</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
            
			
			<NodeRef refid="10"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/set:</TokenIdentifier>
			<Abstract type="html">The name of this store.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) NSString *NS_SWIFT_NAME ( name )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/)</TokenIdentifier>
			<Abstract type="html">The name of this store.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) NSString *NS_SWIFT_NAME ( name )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/)</TokenIdentifier>
			<Abstract type="html">The name of this store.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) NSString *NS_SWIFT_NAME ( name )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setLastExplainQueryPlan:</TokenIdentifier>
			<Abstract type="html">Dictionary with results of last explain query plan</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *lastExplainQueryPlan</Declaration>
			
			
			<Anchor>//api/name/lastExplainQueryPlan</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/lastExplainQueryPlan</TokenIdentifier>
			<Abstract type="html">Dictionary with results of last explain query plan</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *lastExplainQueryPlan</Declaration>
			
			
			<Anchor>//api/name/lastExplainQueryPlan</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/lastExplainQueryPlan</TokenIdentifier>
			<Abstract type="html">Dictionary with results of last explain query plan</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *lastExplainQueryPlan</Declaration>
			
			
			<Anchor>//api/name/lastExplainQueryPlan</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setAllStoreNames:</TokenIdentifier>
			<Abstract type="html">All of the store names for the current user from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) NSArray&lt;NSString*&gt; *allStoreNames</Declaration>
			
			
			<Anchor>//api/name/allStoreNames</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/allStoreNames</TokenIdentifier>
			<Abstract type="html">All of the store names for the current user from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) NSArray&lt;NSString*&gt; *allStoreNames</Declaration>
			
			
			<Anchor>//api/name/allStoreNames</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/allStoreNames</TokenIdentifier>
			<Abstract type="html">All of the store names for the current user from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) NSArray&lt;NSString*&gt; *allStoreNames</Declaration>
			
			
			<Anchor>//api/name/allStoreNames</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setAllGlobalStoreNames:</TokenIdentifier>
			<Abstract type="html">All of the the global store names from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) NSArray&lt;NSString*&gt; *allGlobalStoreNames</Declaration>
			
			
			<Anchor>//api/name/allGlobalStoreNames</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/allGlobalStoreNames</TokenIdentifier>
			<Abstract type="html">All of the the global store names from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) NSArray&lt;NSString*&gt; *allGlobalStoreNames</Declaration>
			
			
			<Anchor>//api/name/allGlobalStoreNames</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/allGlobalStoreNames</TokenIdentifier>
			<Abstract type="html">All of the the global store names from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) NSArray&lt;NSString*&gt; *allGlobalStoreNames</Declaration>
			
			
			<Anchor>//api/name/allGlobalStoreNames</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setEncryptionKeyGenerator:</TokenIdentifier>
			<Abstract type="html">Block used to generate the encryption key.
Salesforce recommends using the default encryption key derivation.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) SFSmartStoreEncryptionKeyGenerator encryptionKeyGenerator</Declaration>
			
			
			<Anchor>//api/name/encryptionKeyGenerator</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/encryptionKeyGenerator</TokenIdentifier>
			<Abstract type="html">Block used to generate the encryption key.
Salesforce recommends using the default encryption key derivation.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) SFSmartStoreEncryptionKeyGenerator encryptionKeyGenerator</Declaration>
			
			
			<Anchor>//api/name/encryptionKeyGenerator</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/encryptionKeyGenerator</TokenIdentifier>
			<Abstract type="html">Block used to generate the encryption key.
Salesforce recommends using the default encryption key derivation.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) SFSmartStoreEncryptionKeyGenerator encryptionKeyGenerator</Declaration>
			
			
			<Anchor>//api/name/encryptionKeyGenerator</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setEncryptionSaltBlock:</TokenIdentifier>
			<Abstract type="html">Block used to generate the salt. The salt is maintained in the keychain. Used only when database needs to be shared between apps.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) SFSmartStoreEncryptionSaltBlock encryptionSaltBlock</Declaration>
			
			
			<Anchor>//api/name/encryptionSaltBlock</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/encryptionSaltBlock</TokenIdentifier>
			<Abstract type="html">Block used to generate the salt. The salt is maintained in the keychain. Used only when database needs to be shared between apps.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) SFSmartStoreEncryptionSaltBlock encryptionSaltBlock</Declaration>
			
			
			<Anchor>//api/name/encryptionSaltBlock</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/encryptionSaltBlock</TokenIdentifier>
			<Abstract type="html">Block used to generate the salt. The salt is maintained in the keychain. Used only when database needs to be shared between apps.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, class, readonly) SFSmartStoreEncryptionSaltBlock encryptionSaltBlock</Declaration>
			
			
			<Anchor>//api/name/encryptionSaltBlock</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/sharedStoreWithName:</TokenIdentifier>
			<Abstract type="html">Use this method to obtain a shared store instance with a particular name for the current user.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)sharedStoreWithName:(NSString *)storeName</Declaration>
			<Parameters>
				<Parameter>
					<Name>storeName</Name>
					<Abstract type="html">The name of the store.  If in doubt, use kDefaultSmartStoreName.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A shared instance of a store with the given name.</Abstract></ReturnValue>
			<Anchor>//api/name/sharedStoreWithName:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/sharedStoreWithName:user:</TokenIdentifier>
			<Abstract type="html">Use this method to obtain a shared store instance with the given name for the given user.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)sharedStoreWithName:(NSString *)storeName user:(SFUserAccount *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>storeName</Name>
					<Abstract type="html">The name of the store.  If in doubt, use kDefaultSmartStoreName.</Abstract>
				</Parameter><Parameter>
					<Name>user</Name>
					<Abstract type="html">The user associated with the store.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sharedStoreWithName:user:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/sharedGlobalStoreWithName:</TokenIdentifier>
			<Abstract type="html">Use this method to obtain a shared global store instance with the given name.  This store will
not be specific to a particular user.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (instancetype)sharedGlobalStoreWithName:(NSString *)storeName</Declaration>
			<Parameters>
				<Parameter>
					<Name>storeName</Name>
					<Abstract type="html">The name of the global store to retrieve.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sharedGlobalStoreWithName:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/removeSharedStoreWithName:</TokenIdentifier>
			<Abstract type="html">You may use this method to completely remove a persistent shared store with
the given name for the current user.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)removeSharedStoreWithName:(NSString *)storeName</Declaration>
			<Parameters>
				<Parameter>
					<Name>storeName</Name>
					<Abstract type="html">The name of the store.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeSharedStoreWithName:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/removeSharedStoreWithName:forUser:</TokenIdentifier>
			<Abstract type="html">You may use this method to completely remove a persisted shared store with the given name
for the given user.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)removeSharedStoreWithName:(NSString *)storeName forUser:(SFUserAccount *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>storeName</Name>
					<Abstract type="html">The name of the store to remove.</Abstract>
				</Parameter><Parameter>
					<Name>user</Name>
					<Abstract type="html">The User Account associated with the store.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeSharedStoreWithName:forUser:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/removeSharedGlobalStoreWithName:</TokenIdentifier>
			<Abstract type="html">You may use this method to completely remove a persisted global store with the given name.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)removeSharedGlobalStoreWithName:(NSString *)storeName</Declaration>
			<Parameters>
				<Parameter>
					<Name>storeName</Name>
					<Abstract type="html">The name of the global store to remove.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeSharedGlobalStoreWithName:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/removeAllStores</TokenIdentifier>
			<Abstract type="html">Removes all of the stores for the current user from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)removeAllStores</Declaration>
			
			
			<Anchor>//api/name/removeAllStores</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/removeAllStoresForUser:</TokenIdentifier>
			<Abstract type="html">Removes all of the store for the given user from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)removeAllStoresForUser:(SFUserAccount *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>user</Name>
					<Abstract type="html">The user associated with the stores to remove.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeAllStoresForUser:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/removeAllGlobalStores</TokenIdentifier>
			<Abstract type="html">Removes all of the global stores from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)removeAllGlobalStores</Declaration>
			
			
			<Anchor>//api/name/removeAllGlobalStores</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/setEncryptionKeyGenerator:</TokenIdentifier>
			<Abstract type="html">Sets a custom block for deriving the encryption key used to encrypt stores.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)setEncryptionKeyGenerator:(SFSmartStoreEncryptionKeyGenerator)newEncryptionKeyGenerator</Declaration>
			<Parameters>
				<Parameter>
					<Name>newEncryptionKeyGenerator</Name>
					<Abstract type="html">The new encryption key derivation block to use with SmartStore.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setEncryptionKeyGenerator:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/setLicenseKey:</TokenIdentifier>
			<Abstract type="html">Set license key for SQLCipher
Needed when using commercial or enterprise editions of SQLCipher
Should be called before using SmartStore</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)setLicenseKey:(NSString *)licenseKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>licenseKey</Name>
					<Abstract type="html">The license key string provided by Zetetic</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLicenseKey:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/indicesForSoup:</TokenIdentifier>
			<Abstract type="html">Name of the soup.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray&lt;SFSoupIndex*&gt; *)indicesForSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">Name of the soup.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSArray of SFSoupIndex for the given soup.</Abstract></ReturnValue>
			<Anchor>//api/name/indicesForSoup:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/soupExists:</TokenIdentifier>
			<Abstract type="html">Name of the soup.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)soupExists:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">Name of the soup.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if a soup with the given name already exists.</Abstract></ReturnValue>
			<Anchor>//api/name/soupExists:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/registerSoup:withIndexSpecs:error:</TokenIdentifier>
			<Abstract type="html">Creates a new soup or confirms the existence of an existing soup.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)registerSoup:(NSString *)soupName withIndexSpecs:(NSArray&lt;SFSoupIndex*&gt; *)indexSpecs error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">Name of the soup to register.</Abstract>
				</Parameter><Parameter>
					<Name>indexSpecs</Name>
					<Abstract type="html">Array of one or more SFSoupIndex objects.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Sets/returns any error generated as part of the process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the soup is registered or already exists.</Abstract></ReturnValue>
			<Anchor>//api/name/registerSoup:withIndexSpecs:error:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/countWithQuerySpec:error:</TokenIdentifier>
			<Abstract type="html">Get the number of entries that would be returned with the given query spec</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSNumber *__nullable)countWithQuerySpec:(SFQuerySpec *)querySpec error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>querySpec</Name>
					<Abstract type="html">A native query spec.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Sets/returns any error generated as part of the process.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/countWithQuerySpec:error:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/queryWithQuerySpec:pageIndex:error:</TokenIdentifier>
			<Abstract type="html">Search for entries matching the given query spec.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray *__nullable)queryWithQuerySpec:(SFQuerySpec *)querySpec pageIndex:(NSUInteger)pageIndex error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>querySpec</Name>
					<Abstract type="html">A native query spec.</Abstract>
				</Parameter><Parameter>
					<Name>pageIndex</Name>
					<Abstract type="html">The page index to start the entries at (this supports paging).</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Sets/returns any error generated as part of the process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A set of entries given the pageSize provided in the querySpec.</Abstract></ReturnValue>
			<Anchor>//api/name/queryWithQuerySpec:pageIndex:error:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/queryWithQuerySpec:pageIndex:whereArgs:error:</TokenIdentifier>
			<Abstract type="html">Search for entries matching the given query spec with optional &quot;where args&quot; (i.e. bind args)
Provided bind args will be substituted to the ? found in the query
NB: Bind args are only supported for smart queries</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray *__nullable)queryWithQuerySpec:(SFQuerySpec *)querySpec pageIndex:(NSUInteger)pageIndex whereArgs:(NSArray *__nullable)whereArgs error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>querySpec</Name>
					<Abstract type="html">A native query spec.</Abstract>
				</Parameter><Parameter>
					<Name>pageIndex</Name>
					<Abstract type="html">The page index to start the entries at (this supports paging).</Abstract>
				</Parameter><Parameter>
					<Name>whereArgs</Name>
					<Abstract type="html">The bind args (optional - only supported for smart queries).</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Sets/returns any error generated as part of the process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A set of entries given the pageSize provided in the querySpec.</Abstract></ReturnValue>
			<Anchor>//api/name/queryWithQuerySpec:pageIndex:whereArgs:error:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/queryAsString:querySpec:pageIndex:error:</TokenIdentifier>
			<Abstract type="html">Search for entries matching the given query spec without deserializing any JSON</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)queryAsString:(NSMutableString *)resultString querySpec:(SFQuerySpec *)querySpec pageIndex:(NSUInteger)pageIndex error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>resultString</Name>
					<Abstract type="html">A mutable string to which the result (serialized) is appended</Abstract>
				</Parameter><Parameter>
					<Name>querySpec</Name>
					<Abstract type="html">A native query spec.</Abstract>
				</Parameter><Parameter>
					<Name>pageIndex</Name>
					<Abstract type="html">The page index to start the entries at (this supports paging).</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Sets/returns any error generated as part of the process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful</Abstract></ReturnValue>
			<Anchor>//api/name/queryAsString:querySpec:pageIndex:error:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setJsonSerializationCheckEnabled:</TokenIdentifier>
			<Abstract type="html">  Experimental flag to do additional checks when reading back soup entries that use external storage
  It could be dropped in a future release. Use only if you know what you are doing.
  </Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (class, nonatomic, assign, getter=isJsonSerializationCheckEnabled) BOOL jsonSerializationCheckEnabled</Declaration>
			
			
			<Anchor>//api/name/jsonSerializationCheckEnabled</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/isJsonSerializationCheckEnabled</TokenIdentifier>
			<Abstract type="html">  Experimental flag to do additional checks when reading back soup entries that use external storage
  It could be dropped in a future release. Use only if you know what you are doing.
  </Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (class, nonatomic, assign, getter=isJsonSerializationCheckEnabled) BOOL jsonSerializationCheckEnabled</Declaration>
			
			
			<Anchor>//api/name/jsonSerializationCheckEnabled</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/jsonSerializationCheckEnabled</TokenIdentifier>
			<Abstract type="html">  Experimental flag to do additional checks when reading back soup entries that use external storage
  It could be dropped in a future release. Use only if you know what you are doing.
  </Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (class, nonatomic, assign, getter=isJsonSerializationCheckEnabled) BOOL jsonSerializationCheckEnabled</Declaration>
			
			
			<Anchor>//api/name/jsonSerializationCheckEnabled</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/retrieveEntries:fromSoup:</TokenIdentifier>
			<Abstract type="html">Search soup for entries exactly matching the soup entry IDs.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray&lt;NSDictionary*&gt; *)retrieveEntries:(NSArray&lt;NSNumber*&gt; *)soupEntryIds fromSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupEntryIds</Name>
					<Abstract type="html">An array of opaque soup entry IDs.</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to query.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array with zero or more entries matching the input IDs. Order is not guaranteed.</Abstract></ReturnValue>
			<Anchor>//api/name/retrieveEntries:fromSoup:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/upsertEntries:toSoup:</TokenIdentifier>
			<Abstract type="html">Insert/update entries to the soup.  Insert vs. update will be determined by the internal
soup entry ID generated from intial entry.  If you want to specify a different identifier
for determining existing entries, use upsertEntries:toSoup:withExternalIdPath:</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray&lt;NSDictionary*&gt; *)upsertEntries:(NSArray&lt;NSDictionary*&gt; *)entries toSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>entries</Name>
					<Abstract type="html">The entries to insert or update.</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to update.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The array of updated entries in the soup.</Abstract></ReturnValue>
			<Anchor>//api/name/upsertEntries:toSoup:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/upsertEntries:toSoup:withExternalIdPath:error:</TokenIdentifier>
			<Abstract type="html">Insert/update entries to the soup.  Insert vs. update will be determined by the specified
external ID path argument.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray *_Nullable)upsertEntries:(NSArray *)entries toSoup:(NSString *)soupName withExternalIdPath:(NSString *)externalIdPath error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>entries</Name>
					<Abstract type="html">The entries to insert or update.</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to update.</Abstract>
				</Parameter><Parameter>
					<Name>externalIdPath</Name>
					<Abstract type="html">The user-defined query spec path used to determine insert vs. update.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Sets/returns any error generated as part of the process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The array of updated entries in the soup.</Abstract></ReturnValue>
			<Anchor>//api/name/upsertEntries:toSoup:withExternalIdPath:error:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/lookupSoupEntryIdForSoupName:forFieldPath:fieldValue:error:</TokenIdentifier>
			<Abstract type="html">Look up the ID for an entry in a soup.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSNumber *__nullable)lookupSoupEntryIdForSoupName:(NSString *)soupName forFieldPath:(NSString *)fieldPath fieldValue:(NSString *)fieldValue error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">Soup name.</Abstract>
				</Parameter><Parameter>
					<Name>fieldPath</Name>
					<Abstract type="html">Field path.</Abstract>
				</Parameter><Parameter>
					<Name>fieldValue</Name>
					<Abstract type="html">Field value.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Sets/returns any error generated as part of the process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The ID of the specified soup entry.</Abstract></ReturnValue>
			<Anchor>//api/name/lookupSoupEntryIdForSoupName:forFieldPath:fieldValue:error:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/removeEntries:fromSoup:error:</TokenIdentifier>
			<Abstract type="html">Remove soup entries exactly matching the soup entry IDs.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)removeEntries:(NSArray&lt;NSNumber*&gt; *)entryIds fromSoup:(NSString *)soupName error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>entryIds</Name>
					<Abstract type="html">An array of opaque soup entry IDs from _soupEntryId.</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup from which to remove the soup entries.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Sets/returns any error generated as part of the process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if no error occurs</Abstract></ReturnValue>
			<Anchor>//api/name/removeEntries:fromSoup:error:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/removeEntries:fromSoup:</TokenIdentifier>
			<Abstract type="html">Remove soup entries exactly matching the soup entry IDs.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (void)removeEntries:(NSArray&lt;NSNumber*&gt; *)entryIds fromSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>entryIds</Name>
					<Abstract type="html">An array of opaque soup entry IDs from _soupEntryId.</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup from which to remove the soup entries.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeEntries:fromSoup:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/removeEntriesByQuery:fromSoup:error:</TokenIdentifier>
			<Abstract type="html">Remove soup entries returned by the given query spec.
NB: A single SQL call is executed to improve performance.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)removeEntriesByQuery:(SFQuerySpec *)querySpec fromSoup:(NSString *)soupName error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>querySpec</Name>
					<Abstract type="html">Query returning entries to delete (if querySpec uses smartSQL, it must select soup entry ids).</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup from which to remove the soup entries.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Sets/returns any error generated as part of the process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if no error occurs</Abstract></ReturnValue>
			<Anchor>//api/name/removeEntriesByQuery:fromSoup:error:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/removeEntriesByQuery:fromSoup:</TokenIdentifier>
			<Abstract type="html">Remove soup entries returned by the given query spec.
NB: A single SQL call is executed to improve performance.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (void)removeEntriesByQuery:(SFQuerySpec *)querySpec fromSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>querySpec</Name>
					<Abstract type="html">Query returning entries to delete (if querySpec uses smartSQL, it must select soup entry ids).</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup from which to remove the soup entries.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeEntriesByQuery:fromSoup:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/clearSoup:</TokenIdentifier>
			<Abstract type="html">Remove all elements from soup.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (void)clearSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to clear.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/clearSoup:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/removeSoup:</TokenIdentifier>
			<Abstract type="html">Remove soup completely from the store.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (void)removeSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to remove from the store.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeSoup:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/removeAllSoups</TokenIdentifier>
			<Abstract type="html">Remove all soups from the store.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (void)removeAllSoups</Declaration>
			
			
			<Anchor>//api/name/removeAllSoups</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/getDatabaseSize</TokenIdentifier>
			<Abstract type="html">Return database file size.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (unsigned long long)getDatabaseSize</Declaration>
			
			<ReturnValue><Abstract type="html">Database size, in bytes.</Abstract></ReturnValue>
			<Anchor>//api/name/getDatabaseSize</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/alterSoup:withIndexSpecs:reIndexData:</TokenIdentifier>
			<Abstract type="html">Alter soup indexes.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)alterSoup:(NSString *)soupName withIndexSpecs:(NSArray&lt;SFSoupIndex*&gt; *)indexSpecs reIndexData:(BOOL)reIndexData</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to alter.</Abstract>
				</Parameter><Parameter>
					<Name>indexSpecs</Name>
					<Abstract type="html">Array of one ore more SFSoupIndex objects to replace existing index specs.</Abstract>
				</Parameter><Parameter>
					<Name>reIndexData</Name>
					<Abstract type="html">pass true if you want existing records to be re-indexed for new index specs.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the soup was altered successfully.</Abstract></ReturnValue>
			<Anchor>//api/name/alterSoup:withIndexSpecs:reIndexData:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/reIndexSoup:withIndexPaths:</TokenIdentifier>
			<Abstract type="html">Reindex a soup.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)reIndexSoup:(NSString *)soupName withIndexPaths:(NSArray&lt;NSString*&gt; *)indexPaths</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to alter.</Abstract>
				</Parameter><Parameter>
					<Name>indexPaths</Name>
					<Abstract type="html">Array of on ore more paths to be reindexed.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if soup reindexing succeeded.</Abstract></ReturnValue>
			<Anchor>//api/name/reIndexSoup:withIndexPaths:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/getRuntimeSettings</TokenIdentifier>
			<Abstract type="html">Return SQLCipher runtime settings</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray *)getRuntimeSettings</Declaration>
			
			<ReturnValue><Abstract type="html">An array with all the compile options used to build SQL Cipher.</Abstract></ReturnValue>
			<Anchor>//api/name/getRuntimeSettings</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/getCompileOptions</TokenIdentifier>
			<Abstract type="html">Return SQLCipher compile options</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray *)getCompileOptions</Declaration>
			
			<ReturnValue><Abstract type="html">An array with all the compile options used to build SQL Cipher.</Abstract></ReturnValue>
			<Anchor>//api/name/getCompileOptions</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/getSQLCipherVersion</TokenIdentifier>
			<Abstract type="html">Return SQLCipher version</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSString *)getSQLCipherVersion</Declaration>
			
			<ReturnValue><Abstract type="html">The version of SQL Cipher in use.</Abstract></ReturnValue>
			<Anchor>//api/name/getSQLCipherVersion</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/getCipherProviderVersion</TokenIdentifier>
			<Abstract type="html">Return SQLCipher provider version</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSString *)getCipherProviderVersion</Declaration>
			
			<ReturnValue><Abstract type="html">cipher provider version</Abstract></ReturnValue>
			<Anchor>//api/name/getCipherProviderVersion</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/getCipherFIPSStatus</TokenIdentifier>
			<Abstract type="html">Return SQLCipher FIPS status</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)getCipherFIPSStatus</Declaration>
			
			<ReturnValue><Abstract type="html">true if using a FIPS enabled SQLCipher edition</Abstract></ReturnValue>
			<Anchor>//api/name/getCipherFIPSStatus</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/resumeLongOperations</TokenIdentifier>
			<Abstract type="html">Complete long operations that were interrupted.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (void)resumeLongOperations</Declaration>
			
			
			<Anchor>//api/name/resumeLongOperations</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/isFileDataProtectionActive</TokenIdentifier>
			<Abstract type="html">This property is updated when notifications are received for
UIApplicationProtectedDataDidBecomeAvailable and UIApplicationProtectedDataWillBecomeUnavailable events.
Note that on the simulator currently, data protection is NEVER active.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)isFileDataProtectionActive</Declaration>
			
			<ReturnValue><Abstract type="html">YES if file data protection (full passcode-based encryption) is available.</Abstract></ReturnValue>
			<Anchor>//api/name/isFileDataProtectionActive</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/allSoupNames</TokenIdentifier>
			<Abstract type="html">Return all soup names.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray&lt;NSString*&gt; *)allSoupNames</Declaration>
			
			<ReturnValue><Abstract type="html">Array containing all soup names.</Abstract></ReturnValue>
			<Anchor>//api/name/allSoupNames</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/dateFromLastModifiedValue:</TokenIdentifier>
			<Abstract type="html">Creates a date object from the last modified date column value, which is numeric.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (NSDate *)dateFromLastModifiedValue:(NSNumber *)lastModifiedValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>lastModifiedValue</Name>
					<Abstract type="html">The numeric value of the date stored in the soup entry.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The NSDate representation of the last modified date.</Abstract></ReturnValue>
			<Anchor>//api/name/dateFromLastModifiedValue:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/licenseKey</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>+ (NSString *)licenseKey</Declaration>
			
			
			<Anchor>//api/name/licenseKey</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setStoreQueue:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) FMDatabaseQueue *storeQueue</Declaration>
			
			
			<Anchor>//api/name/storeQueue</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/storeQueue</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) FMDatabaseQueue *storeQueue</Declaration>
			
			
			<Anchor>//api/name/storeQueue</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/storeQueue</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) FMDatabaseQueue *storeQueue</Declaration>
			
			
			<Anchor>//api/name/storeQueue</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setDbMgr:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFSmartStoreDatabaseManager *dbMgr</Declaration>
			
			
			<Anchor>//api/name/dbMgr</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/dbMgr</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFSmartStoreDatabaseManager *dbMgr</Declaration>
			
			
			<Anchor>//api/name/dbMgr</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/dbMgr</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFSmartStoreDatabaseManager *dbMgr</Declaration>
			
			
			<Anchor>//api/name/dbMgr</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setIsGlobal:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isGlobal</Declaration>
			
			
			<Anchor>//api/name/isGlobal</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/isGlobal</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isGlobal</Declaration>
			
			
			<Anchor>//api/name/isGlobal</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/isGlobal</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isGlobal</Declaration>
			
			
			<Anchor>//api/name/isGlobal</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setFtsExtension:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) SFSmartStoreFtsExtension ftsExtension</Declaration>
			
			
			<Anchor>//api/name/ftsExtension</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/ftsExtension</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) SFSmartStoreFtsExtension ftsExtension</Declaration>
			
			
			<Anchor>//api/name/ftsExtension</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/ftsExtension</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) SFSmartStoreFtsExtension ftsExtension</Declaration>
			
			
			<Anchor>//api/name/ftsExtension</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/openStoreDatabase</TokenIdentifier>
			<Abstract type="html">Simply open the db file.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (BOOL)openStoreDatabase</Declaration>
			
			<ReturnValue><Abstract type="html">YES if we were able to open the DB file.</Abstract></ReturnValue>
			<Anchor>//api/name/openStoreDatabase</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/createMetaTables</TokenIdentifier>
			<Abstract type="html">Create soup index map table to keep track of soups&apos; index specs (SOUPINDEXMAP_TABLE)
Create soup attributes table to keep track of soups&apos; attributes specs (e.g. external blobs storage)
and maps arbitrary soup names to soup table names (SOUPATTRSTABLE)</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (BOOL)createMetaTables</Declaration>
			
			<ReturnValue><Abstract type="html">YES if we were able to create the meta tables, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/createMetaTables</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/createLongOperationsStatusTable</TokenIdentifier>
			<Abstract type="html">Create long operations status table (LONGOPERATIONSSTATUS_TABLE)</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (BOOL)createLongOperationsStatusTable</Declaration>
			
			<ReturnValue><Abstract type="html">YES if we were able to create the table, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/createLongOperationsStatusTable</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/registerSoupWithName:withIndexSpecs:withSoupTableName:withDb:</TokenIdentifier>
			<Abstract type="html">Register the soup</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (void)registerSoupWithName:(NSString *)soupName withIndexSpecs:(NSArray *)indexSpecs withSoupTableName:(NSString *)soupTableName withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to register</Abstract>
				</Parameter><Parameter>
					<Name>indexSpecs</Name>
					<Abstract type="html">Array of one ore more IndexSpec objects as dictionaries</Abstract>
				</Parameter><Parameter>
					<Name>soupTableName</Name>
					<Abstract type="html">The name of the table to use for the soup</Abstract>
				</Parameter><Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerSoupWithName:withIndexSpecs:withSoupTableName:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/tableNameForSoup:withDb:</TokenIdentifier>
			<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (NSString *)tableNameForSoup:(NSString *)soupName withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The soup table name from SOUPATTRSTABLE, based on soup name.</Abstract></ReturnValue>
			<Anchor>//api/name/tableNameForSoup:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/indicesForSoup:withDb:</TokenIdentifier>
			<Abstract type="html">the name of the soup</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (NSArray *)indicesForSoup:(NSString *)soupName withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">the name of the soup</Abstract>
				</Parameter><Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSArray of SFSoupIndex for the given soup</Abstract></ReturnValue>
			<Anchor>//api/name/indicesForSoup:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/reIndexSoup:withIndexPaths:withDb:</TokenIdentifier>
			<Abstract type="html">Helper method re-index a soup.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (BOOL)reIndexSoup:(NSString *)soupName withIndexPaths:(NSArray *)indexPaths withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The soup to re-index</Abstract>
				</Parameter><Parameter>
					<Name>indexPaths</Name>
					<Abstract type="html">Array of one ore more IndexSpec objects as dictionaries</Abstract>
				</Parameter><Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the insert was successful, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/reIndexSoup:withIndexPaths:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/insertIntoTable:values:withDb:</TokenIdentifier>
			<Abstract type="html">Helper method to insert values into an arbitrary table.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (void)insertIntoTable:(NSString *)tableName values:(NSDictionary *)map withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>tableName</Name>
					<Abstract type="html">The table to insert the data into.</Abstract>
				</Parameter><Parameter>
					<Name>map</Name>
					<Abstract type="html">A dictionary of key-value pairs to be inserted into table.</Abstract>
				</Parameter><Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/insertIntoTable:values:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/updateTable:values:entryId:idCol:withDb:</TokenIdentifier>
			<Abstract type="html">Helper method to update existing values in a table.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (void)updateTable:(NSString *)tableName values:(NSDictionary *)map entryId:(NSNumber *)entryId idCol:(NSString *)idCol withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>tableName</Name>
					<Abstract type="html">The name of the table to update.</Abstract>
				</Parameter><Parameter>
					<Name>map</Name>
					<Abstract type="html">The column name/value mapping to update.</Abstract>
				</Parameter><Parameter>
					<Name>entryId</Name>
					<Abstract type="html">The ID value used to determine what to update.</Abstract>
				</Parameter><Parameter>
					<Name>idCol</Name>
					<Abstract type="html">The name of the ID column</Abstract>
				</Parameter><Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/updateTable:values:entryId:idCol:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/queryTable:forColumns:orderBy:limit:whereClause:whereArgs:withDb:</TokenIdentifier>
			<Abstract type="html">Helper to query table</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (FMResultSet *)queryTable:(NSString *)table forColumns:(NSArray *)columns orderBy:(NSString *)orderBy limit:(NSString *)limit whereClause:(NSString *)whereClause whereArgs:(NSArray *)whereArgs withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>table</Name>
					<Abstract type="html">Table</Abstract>
				</Parameter><Parameter>
					<Name>columns</Name>
					<Abstract type="html">Column names</Abstract>
				</Parameter><Parameter>
					<Name>orderBy</Name>
					<Abstract type="html">Order by column</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">Limit</Abstract>
				</Parameter><Parameter>
					<Name>whereClause</Name>
					<Abstract type="html">Where clause</Abstract>
				</Parameter><Parameter>
					<Name>whereArgs</Name>
					<Abstract type="html">Arguments to where clause</Abstract>
				</Parameter><Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">FMResultSet</Abstract></ReturnValue>
			<Anchor>//api/name/queryTable:forColumns:orderBy:limit:whereClause:whereArgs:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/columnNameForPath:inSoup:withDb:</TokenIdentifier>
			<Abstract type="html">Path of interest</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (NSString *)columnNameForPath:(NSString *)path inSoup:(NSString *)soupName withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">Path of interest</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">name of the soup</Abstract>
				</Parameter><Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The column name for the given path if indexed or nil otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/columnNameForPath:inSoup:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/hasIndexForPath:inSoup:withDb:</TokenIdentifier>
			<Abstract type="html">Path of interest</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (BOOL)hasIndexForPath:(NSString *)path inSoup:(NSString *)soupName withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">Path of interest</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">name of the soup</Abstract>
				</Parameter><Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the given path is indexed or NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/hasIndexForPath:inSoup:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/currentTimeInMilliseconds</TokenIdentifier>
			<Abstract type="html">Similar to System.currentTimeMillis: time in ms since Jan 1 1970
Used for timestamping created and modified times.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (NSNumber *)currentTimeInMilliseconds</Declaration>
			
			<ReturnValue><Abstract type="html">The current number of milliseconds since 1/1/1970.</Abstract></ReturnValue>
			<Anchor>//api/name/currentTimeInMilliseconds</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/encKey</TokenIdentifier>
			<Abstract type="html">The key used to encrypt the store.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>+ (NSString *)encKey</Declaration>
			
			<ReturnValue><Abstract type="html">The key used to encrypt the store.</Abstract></ReturnValue>
			<Anchor>//api/name/encKey</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/salt</TokenIdentifier>
			<Abstract type="html">The key used to encrypt the store for shared mode. Sqlite headers are maintained in plain text for database.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>+ (NSString *)salt</Declaration>
			
			<ReturnValue><Abstract type="html">The key used to encrypt the store for shared mode. Sqlite headers are maintained in plain text for database.</Abstract></ReturnValue>
			<Anchor>//api/name/salt</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/clearSharedStoreMemoryState</TokenIdentifier>
			<Abstract type="html">FOR UNIT TESTING.  Removes all of the shared smart store objects from memory (persisted stores remain).</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)clearSharedStoreMemoryState</Declaration>
			
			
			<Anchor>//api/name/clearSharedStoreMemoryState</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/stringFromInputStream:</TokenIdentifier>
			<Abstract type="html">FOR UNIT TESTING.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>+ (NSString *)stringFromInputStream:(NSInputStream *)inputStream</Declaration>
			
			<ReturnValue><Abstract type="html">string decoded from the specified input stream</Abstract></ReturnValue>
			<Anchor>//api/name/stringFromInputStream:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/convertSmartSql:</TokenIdentifier>
			<Abstract type="html">Convert smart sql to sql.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (NSString *)convertSmartSql:(NSString *)smartSql</Declaration>
			<Parameters>
				<Parameter>
					<Name>smartSql</Name>
					<Abstract type="html">The smart sql to convert.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The sql.</Abstract></ReturnValue>
			<Anchor>//api/name/convertSmartSql:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/removeFromCache:</TokenIdentifier>
			<Abstract type="html">Remove soup from cache</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (void)removeFromCache:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to remove</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeFromCache:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/getLongOperations</TokenIdentifier>
			<Abstract type="html">unfinished long operations</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (NSArray *)getLongOperations</Declaration>
			
			<ReturnValue><Abstract type="html">unfinished long operations</Abstract></ReturnValue>
			<Anchor>//api/name/getLongOperations</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/executeQueryThrows:withDb:</TokenIdentifier>
			<Abstract type="html">  Execute query
  Log errors and throw exception in case of error</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (FMResultSet *)executeQueryThrows:(NSString *)sql withDb:(FMDatabase *)db</Declaration>
			
			
			<Anchor>//api/name/executeQueryThrows:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/executeQueryThrows:withArgumentsInArray:withDb:</TokenIdentifier>
			<Abstract type="html">Execute query
Log errors and throw exception in case of error</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (FMResultSet *)executeQueryThrows:(NSString *)sql withArgumentsInArray:(NSArray *)arguments withDb:(FMDatabase *)db</Declaration>
			
			
			<Anchor>//api/name/executeQueryThrows:withArgumentsInArray:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/executeUpdateThrows:withDb:</TokenIdentifier>
			<Abstract type="html">Execute update
Log errors and throw exception in case of error</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (void)executeUpdateThrows:(NSString *)sql withDb:(FMDatabase *)db</Declaration>
			
			
			<Anchor>//api/name/executeUpdateThrows:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/executeUpdateThrows:withArgumentsInArray:withDb:</TokenIdentifier>
			<Abstract type="html">Execute update
Log errors and throw exception in case of error</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (void)executeUpdateThrows:(NSString *)sql withArgumentsInArray:(NSArray *)arguments withDb:(FMDatabase *)db</Declaration>
			
			
			<Anchor>//api/name/executeUpdateThrows:withArgumentsInArray:withDb:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/checkRawJson:fromMethod:</TokenIdentifier>
			<Abstract type="html">Check that the given raw JSON string represents valid JSON.
Note: If the jsonSerializationCheckEnabled property is set to NO, this method will
always return YES (i.e. that the result is valid).</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (BOOL)checkRawJson:(NSString *)rawJson fromMethod:(NSString *)fromMethod</Declaration>
			<Parameters>
				<Parameter>
					<Name>rawJson</Name>
					<Abstract type="html">The raw JSON string to validate.</Abstract>
				</Parameter><Parameter>
					<Name>fromMethod</Name>
					<Abstract type="html">The method making the call (for logging purposes on failure).</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the JSON string is valid JSON, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/checkRawJson:fromMethod:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
        
        
	</File>
</Tokens>