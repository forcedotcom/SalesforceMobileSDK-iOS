<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFRestAPI.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFRestAPI</TokenIdentifier>
			<Abstract type="html">Main class used to issue REST requests to the standard Force.com REST API.
See the Force.com REST API Developer&apos;s Guide
for more information regarding the Force.com REST API.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
            
			
			<NodeRef refid="33"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/setApiVersion:</TokenIdentifier>
			<Abstract type="html">The REST API version used for all the calls.
The default value is kSFRestDefaultAPIVersion (currently &quot;v63.0&quot;)</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *apiVersion</Declaration>
			
			
			<Anchor>//api/name/apiVersion</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/apiVersion</TokenIdentifier>
			<Abstract type="html">The REST API version used for all the calls.
The default value is kSFRestDefaultAPIVersion (currently &quot;v63.0&quot;)</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *apiVersion</Declaration>
			
			
			<Anchor>//api/name/apiVersion</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFRestAPI/apiVersion</TokenIdentifier>
			<Abstract type="html">The REST API version used for all the calls.
The default value is kSFRestDefaultAPIVersion (currently &quot;v63.0&quot;)</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *apiVersion</Declaration>
			
			
			<Anchor>//api/name/apiVersion</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/set:</TokenIdentifier>
			<Abstract type="html">The user associated with this instance of SFRestAPI.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) SFUserAccount *NS_SWIFT_NAME ( userAccount )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/)</TokenIdentifier>
			<Abstract type="html">The user associated with this instance of SFRestAPI.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) SFUserAccount *NS_SWIFT_NAME ( userAccount )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFRestAPI/)</TokenIdentifier>
			<Abstract type="html">The user associated with this instance of SFRestAPI.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) SFUserAccount *NS_SWIFT_NAME ( userAccount )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/sharedInstanceWithUser:</TokenIdentifier>
			<Abstract type="html">Returns the singleton instance of SFRestAPI associated with the specified user.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>+ (nullable SFRestAPI *)sharedInstanceWithUser:(nonnull SFUserAccount *)userAccount</Declaration>
			
			
			<Anchor>//api/name/sharedInstanceWithUser:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/setIsTestRun:</TokenIdentifier>
			<Abstract type="html">Specifies whether the current execution is a test run.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>+ (void)setIsTestRun:(BOOL)isTestRun</Declaration>
			<Parameters>
				<Parameter>
					<Name>isTestRun</Name>
					<Abstract type="html">YES if this is a test run.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setIsTestRun:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/getIsTestRun</TokenIdentifier>
			<Abstract type="html">Indicates whether the current execution is a test run.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>+ (BOOL)getIsTestRun</Declaration>
			
			<ReturnValue><Abstract type="html">True if this execution is a test run.</Abstract></ReturnValue>
			<Anchor>//api/name/getIsTestRun</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/cleanup</TokenIdentifier>
			<Abstract type="html">Perform cleanup due to a host change or logout.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (void)cleanup</Declaration>
			
			
			<Anchor>//api/name/cleanup</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/cancelAllRequests</TokenIdentifier>
			<Abstract type="html">Cancel all requests that are waiting to be executed.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (void)cancelAllRequests</Declaration>
			
			
			<Anchor>//api/name/cancelAllRequests</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/send:requestDelegate:</TokenIdentifier>
			<Abstract type="html">Sends a REST request to the Salesforce server and invokes the appropriate delegate method.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (void)send:(SFRestRequest *)request requestDelegate:(nullable id&lt;SFRestRequestDelegate&gt;)requestDelegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">SFRestRequest object to be sent.</Abstract>
				</Parameter><Parameter>
					<Name>requestDelegate</Name>
					<Abstract type="html">Delegate object that handles the server response.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/send:requestDelegate:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForUserInfo</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that returns information associated with the current user.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForUserInfo</Declaration>
			
			
			<Anchor>//api/name/requestForUserInfo</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForSingleAccess:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that returns URL to bridge into UI sessions (a front door URL).</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForSingleAccess:(NSString *)redirectUri</Declaration>
			<Parameters>
				<Parameter>
					<Name>redirectUri</Name>
					<Abstract type="html">A relative path that points to where the user is redirected when their new session begins.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForSingleAccess:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForVersions</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that lists summary information about each
Salesforce.com version currently available. Summaries include the version,
label, and a link to each version&apos;s root.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForVersions</Declaration>
			
			
			<Anchor>//api/name/requestForVersions</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForLimits:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that returns information about limits in your org</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForLimits:(nullable NSString *)apiVersion</Declaration>
			
			
			<Anchor>//api/name/requestForLimits:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/cheapRequest:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object for a cheap request to re-hydrate the access token</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)cheapRequest:(nullable NSString *)apiVersion</Declaration>
			
			
			<Anchor>//api/name/cheapRequest:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForResources:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that lists available resources for the
client&apos;s API version, including resource name and URI.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForResources:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForResources:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForDescribeGlobal:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that lists available objects in your org and their
metadata.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForDescribeGlobal:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForDescribeGlobal:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForMetadataWithObjectType:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that describes the individual metadata for the
specified object.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForMetadataWithObjectType:(NSString *)objectType apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of a Salesforce object. Example: &quot;Account&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForMetadataWithObjectType:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForDescribeWithObjectType:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that completely describes the metadata
at all levels for the specified object.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForDescribeWithObjectType:(NSString *)objectType apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of a Salesforce object. Example: &quot;Account&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForDescribeWithObjectType:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForLayoutWithObjectAPIName:formFactor:layoutType:mode:recordTypeId:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that provides layout data for the specified parameters.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForLayoutWithObjectAPIName:(nonnull NSString *)objectAPIName formFactor:(nullable NSString *)formFactor layoutType:(nullable NSString *)layoutType mode:(nullable NSString *)mode recordTypeId:(nullable NSString *)recordTypeId apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectAPIName</Name>
					<Abstract type="html">Object API name.</Abstract>
				</Parameter><Parameter>
					<Name>formFactor</Name>
					<Abstract type="html">Form factor. Could be &quot;Large&quot;, &quot;Medium&quot; or &quot;Small&quot;. Default value is &quot;Large&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>layoutType</Name>
					<Abstract type="html">Layout type. Could be &quot;Compact&quot; or &quot;Full&quot;. Default value is &quot;Full&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>mode</Name>
					<Abstract type="html">Mode. Could be &quot;Create&quot;, &quot;Edit&quot; or &quot;View&quot;. Default value is &quot;View&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>recordTypeId</Name>
					<Abstract type="html">Record type ID. Default will be used if not supplied.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForLayoutWithObjectAPIName:formFactor:layoutType:mode:recordTypeId:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForRetrieveWithObjectType:objectId:fieldList:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that retrieves field values for the specified record of the given type.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForRetrieveWithObjectType:(NSString *)objectType objectId:(NSString *)objectId fieldList:(nullable NSString *)fieldList apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of a Salesforce object. Example: &quot;Account&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>objectId</Name>
					<Abstract type="html">Requested record&apos;s object ID.</Abstract>
				</Parameter><Parameter>
					<Name>fieldList</Name>
					<Abstract type="html">Comma-separated list of fields for which
to return values. Example: &quot;Name,Industry,TickerSymbol&quot;.
Pass nil to retrieve all the fields.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForRetrieveWithObjectType:objectId:fieldList:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForCreateWithObjectType:fields:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that creates a new record of the given type.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForCreateWithObjectType:(NSString *)objectType fields:(nullable NSDictionary&lt;NSString*,id&gt; *)fields apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of a Salesforce object. Example: &quot;Account&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>fields</Name>
					<Abstract type="html">NSDictionary object containing initial field names and values for
the record. Example: {Name: &quot;salesforce.com&quot;, TickerSymbol:
&quot;CRM&quot;}</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForCreateWithObjectType:fields:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForUpsertWithObjectType:externalIdField:externalId:fields:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that creates or updates record of the given type, based on the
given external ID.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForUpsertWithObjectType:(NSString *)objectType externalIdField:(NSString *)externalIdField externalId:(nullable NSString *)externalId fields:(NSDictionary&lt;NSString*,id&gt; *)fields apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of a Salesforce object. Example: &quot;Account&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>externalIdField</Name>
					<Abstract type="html">External ID field name. Example: &quot;accountMaster__c&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>externalId</Name>
					<Abstract type="html">Requested record&apos;s external ID value.</Abstract>
				</Parameter><Parameter>
					<Name>fields</Name>
					<Abstract type="html">NSDictionary object containing field names and values for
the record. Example: {Name: &quot;salesforce.com&quot;, TickerSymbol
&quot;CRM&quot;}</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForUpsertWithObjectType:externalIdField:externalId:fields:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForUpdateWithObjectType:objectId:fields:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that updates field values on a record of the given type.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForUpdateWithObjectType:(NSString *)objectType objectId:(NSString *)objectId fields:(nullable NSDictionary&lt;NSString*,id&gt; *)fields apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of a Salesforce object. Example: &quot;Account&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>objectId</Name>
					<Abstract type="html">Requested record&apos;s object ID.</Abstract>
				</Parameter><Parameter>
					<Name>fields</Name>
					<Abstract type="html">NSDictionary object containing initial field names and values for
the record. Example: {Name: &quot;salesforce.com&quot;, TickerSymbol
&quot;CRM&quot;}.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForUpdateWithObjectType:objectId:fields:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForUpdateWithObjectType:objectId:fields:ifUnmodifiedSinceDate:apiVersion:</TokenIdentifier>
			<Abstract type="html">Same as requestForUpdateWithObjectType:objectId:fields but only executing update
if the server record was not modified since ifModifiedSinceDate.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForUpdateWithObjectType:(NSString *)objectType objectId:(NSString *)objectId fields:(nullable NSDictionary&lt;NSString*,id&gt; *)fields ifUnmodifiedSinceDate:(nullable NSDate *)ifUnmodifiedSinceDate apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of a Salesforce object. Example: &quot;Account&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>objectId</Name>
					<Abstract type="html">Requested record&apos;s object ID.</Abstract>
				</Parameter><Parameter>
					<Name>fields</Name>
					<Abstract type="html">NSDictionary object containing initial field names and values for the specified record.</Abstract>
				</Parameter><Parameter>
					<Name>ifUnmodifiedSinceDate</Name>
					<Abstract type="html">Update occurs only if the current last modified date of the specified record is
older than ifUnmodifiedSinceDate.
Otherwise, this method returns a 412 (precondition failed) error.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForUpdateWithObjectType:objectId:fields:ifUnmodifiedSinceDate:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForDeleteWithObjectType:objectId:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that deletes a record of the given type.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForDeleteWithObjectType:(NSString *)objectType objectId:(NSString *)objectId apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of a Salesforce object. Example: &quot;Account&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>objectId</Name>
					<Abstract type="html">Requested record&apos;s object ID.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForDeleteWithObjectType:objectId:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForQuery:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that executes the specified SOQL query.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForQuery:(NSString *)soql apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>soql</Name>
					<Abstract type="html">String containing the query to execute. Example: &quot;SELECT Id,
Name from Account ORDER BY Name LIMIT 20&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForQuery:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForQuery:apiVersion:batchSize:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that executes the specified SOQL query.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForQuery:(NSString *)soql apiVersion:(nullable NSString *)apiVersion batchSize:(NSInteger)batchSize</Declaration>
			<Parameters>
				<Parameter>
					<Name>soql</Name>
					<Abstract type="html">String containing the query to execute. Example: &quot;SELECT Id,
Name from Account ORDER BY Name LIMIT 20&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter><Parameter>
					<Name>batchSize</Name>
					<Abstract type="html">Batch size: number between 200 and 2000 (default).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForQuery:apiVersion:batchSize:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForQueryAll:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that executes the specified SOQL query.
The result includes deleted objects.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForQueryAll:(NSString *)soql apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>soql</Name>
					<Abstract type="html">String containing the query to execute. Example: &quot;SELECT Id,
Name from Account ORDER BY Name LIMIT 20&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForQueryAll:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForSearch:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that executes the specified SOSL search.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForSearch:(NSString *)sosl apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>sosl</Name>
					<Abstract type="html">String containing the search to execute. Example: &quot;FIND {needle}&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForSearch:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForSearchScopeAndOrder:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that returns an ordered list of objects in the default global search scope of a logged-in user.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForSearchScopeAndOrder:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForSearchScopeAndOrder:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForSearchResultLayout:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that contains search result layout information for the objects in the query string.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForSearchResultLayout:(NSString *)objectList apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectList</Name>
					<Abstract type="html">Comma-separated list of objects for which
to return values. Example: &quot;Account,Contact&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForSearchResultLayout:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/batchRequest:haltOnError:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that executes a batch of requests.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)batchRequest:(NSArray&lt;SFRestRequest*&gt; *)requests haltOnError:(BOOL)haltOnError apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>requests</Name>
					<Abstract type="html">Array of subrequests to execute.</Abstract>
				</Parameter><Parameter>
					<Name>haltOnError</Name>
					<Abstract type="html">Controls whether Salesforce stops processing subrequests if a subrequest fails.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/batchRequest:haltOnError:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/compositeRequest:refIds:allOrNone:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that executes a composite request.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)compositeRequest:(NSArray&lt;SFRestRequest*&gt; *)requests refIds:(NSArray&lt;NSString*&gt; *)refIds allOrNone:(BOOL)allOrNone apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>requests</Name>
					<Abstract type="html">Array of subrequests to execute.</Abstract>
				</Parameter><Parameter>
					<Name>refIds</Name>
					<Abstract type="html">Array of reference IDs for the requests. The number of elements should match the number of requests.</Abstract>
				</Parameter><Parameter>
					<Name>allOrNone</Name>
					<Abstract type="html">Specifies whether to return partial results when an error occurs while processing a subrequest.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/compositeRequest:refIds:allOrNone:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForSObjectTree:objectTrees:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object that executes an sObject tree request.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForSObjectTree:(NSString *)objectType objectTrees:(NSArray&lt;SFSObjectTree*&gt; *)objectTrees apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of a Salesforce object. Example: &quot;Account&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>objectTrees</Name>
					<Abstract type="html">Array of sobject trees.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForSObjectTree:objectTrees:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForPrimingRecords:changedAfterTimestamp:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object for getting list of record related to offline briefcase</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForPrimingRecords:(nullable NSString *)relayToken changedAfterTimestamp:(nullable NSNumber *)timestamp apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>relayToken</Name>
					<Abstract type="html">Relay token (to get next page of results)</Abstract>
				</Parameter><Parameter>
					<Name>timestamp</Name>
					<Abstract type="html">To only get ids of records that changed after given time - or nil</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">Salesforce API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForPrimingRecords:changedAfterTimestamp:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForCollectionCreate:records:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object for creating multiple records with fewer round trips</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForCollectionCreate:(BOOL)allOrNone records:(NSArray&lt;NSDictionary*&gt; *)records apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>allOrNone</Name>
					<Abstract type="html">Indicates whether to roll back the entire request when the creation of any object fails (true) or to continue with the independent creation of other objects in the request.</Abstract>
				</Parameter><Parameter>
					<Name>records</Name>
					<Abstract type="html">Array of sObjects.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">Salesforce API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForCollectionCreate:records:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForCollectionRetrieve:objectIds:fieldList:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object for retrieving multiple records with fewer round trips</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForCollectionRetrieve:(NSString *)objectType objectIds:(NSArray&lt;NSString*&gt; *)objectIds fieldList:(NSArray&lt;NSString*&gt; *)fieldList apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of the requested record.</Abstract>
				</Parameter><Parameter>
					<Name>objectIds</Name>
					<Abstract type="html">Array of Salesforce IDs of the requested records.</Abstract>
				</Parameter><Parameter>
					<Name>fieldList</Name>
					<Abstract type="html">Array of requested field names.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">Salesforce API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForCollectionRetrieve:objectIds:fieldList:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForCollectionUpdate:records:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object for updating multiple records with fewer round trips</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForCollectionUpdate:(BOOL)allOrNone records:(NSArray&lt;NSDictionary*&gt; *)records apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>allOrNone</Name>
					<Abstract type="html">Indicates whether to roll back the entire request when the update of any object fails (true) or to continue with the independent update of other objects in the request.</Abstract>
				</Parameter><Parameter>
					<Name>records</Name>
					<Abstract type="html">Array of sObjects.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">Salesforce API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForCollectionUpdate:records:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForCollectionUpsert:objectType:externalIdField:records:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object for upserting multiple records with fewer round trips</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForCollectionUpsert:(BOOL)allOrNone objectType:(NSString *)objectType externalIdField:(NSString *)externalIdField records:(NSArray&lt;NSDictionary*&gt; *)records apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>allOrNone</Name>
					<Abstract type="html">Indicates whether to roll back the entire request when the upsert of any object fails (true) or to continue with the independent upsert of other objects in the request.</Abstract>
				</Parameter><Parameter>
					<Name>objectType</Name>
					<Abstract type="html">Type of the requested record.</Abstract>
				</Parameter><Parameter>
					<Name>externalIdField</Name>
					<Abstract type="html">Name of ID field in source data.</Abstract>
				</Parameter><Parameter>
					<Name>records</Name>
					<Abstract type="html">Array of sObjects.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">Salesforce API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForCollectionUpsert:objectType:externalIdField:records:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForCollectionDelete:objectIds:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns an SFRestRequest object for deleting multiple records with fewer round trips</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForCollectionDelete:(BOOL)allOrNone objectIds:(NSArray&lt;NSString*&gt; *)objectIds apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>allOrNone</Name>
					<Abstract type="html">Indicates whether to roll back the entire request when the delete of any object fails (true) or to continue with the independent delete of other objects in the request.</Abstract>
				</Parameter><Parameter>
					<Name>objectIds</Name>
					<Abstract type="html">List of Salesforce IDs of the records to delete.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">Salesforce API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForCollectionDelete:objectIds:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/isStatusCodeSuccess:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isStatusCodeSuccess:(NSUInteger)statusCode</Declaration>
			
			
			<Anchor>//api/name/isStatusCodeSuccess:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/isStatusCodeNotFound:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isStatusCodeNotFound:(NSUInteger)statusCode</Declaration>
			
			
			<Anchor>//api/name/isStatusCodeNotFound:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/userAgentString</TokenIdentifier>
			<Abstract type="html">Provides the User-Agent string used by Mobile SDK.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>+ (NSString *)userAgentString</Declaration>
			
			
			<Anchor>//api/name/userAgentString</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/userAgentString:</TokenIdentifier>
			<Abstract type="html">* Returns the User-Agent string used by Mobile SDK, adding the qualifier after the app type.</Abstract>
			<DeclaredIn>SFRestAPI.h</DeclaredIn>
			
			<Declaration>+ (NSString *)userAgentString:(NSString *)qualifier</Declaration>
			<Parameters>
				<Parameter>
					<Name>qualifier</Name>
					<Abstract type="html">Optional subtype of native or hybrid Mobile SDK app.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/userAgentString:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/errorWithDescription:</TokenIdentifier>
			<Abstract type="html">Creates an error object with the given description.</Abstract>
			<DeclaredIn>SFRestAPI+Blocks.h</DeclaredIn>
			
			<Declaration>+ (NSError *)errorWithDescription:(NSString *)description</Declaration>
			<Parameters>
				<Parameter>
					<Name>description</Name>
					<Abstract type="html">Description</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/errorWithDescription:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/sendRequest:failureBlock:successBlock:</TokenIdentifier>
			<Abstract type="html">Sends a request you&apos;ve already built, using blocks to return status.</Abstract>
			<DeclaredIn>SFRestAPI+Blocks.h</DeclaredIn>
			
			<Declaration>- (void)sendRequest:(SFRestRequest *)request failureBlock:(SFRestRequestFailBlock)failureBlock successBlock:(SFRestResponseBlock)successBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">SFRestRequest to be sent.</Abstract>
				</Parameter><Parameter>
					<Name>failureBlock</Name>
					<Abstract type="html">Block to be executed when the request fails (timeout, cancel, or error).</Abstract>
				</Parameter><Parameter>
					<Name>successBlock</Name>
					<Abstract type="html">Block to be executed when the request successfully completes.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendRequest:failureBlock:successBlock:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/sendCompositeRequest:failureBlock:successBlock:</TokenIdentifier>
			<Abstract type="html">Sends a request you&apos;ve already built, using blocks to return status.</Abstract>
			<DeclaredIn>SFRestAPI+Blocks.h</DeclaredIn>
			
			<Declaration>- (void)sendCompositeRequest:(SFSDKCompositeRequest *)request failureBlock:(SFRestRequestFailBlock)failureBlock successBlock:(SFRestCompositeResponseBlock)successBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">Composite request to be sent.</Abstract>
				</Parameter><Parameter>
					<Name>failureBlock</Name>
					<Abstract type="html">Block to be executed when the request fails (timeout, cancel, or error).</Abstract>
				</Parameter><Parameter>
					<Name>successBlock</Name>
					<Abstract type="html">Block to be executed when the request successfully completes.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendCompositeRequest:failureBlock:successBlock:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/sendBatchRequest:failureBlock:successBlock:</TokenIdentifier>
			<Abstract type="html">Sends a request you&apos;ve already built, using blocks to return status.</Abstract>
			<DeclaredIn>SFRestAPI+Blocks.h</DeclaredIn>
			
			<Declaration>- (void)sendBatchRequest:(SFSDKBatchRequest *)request failureBlock:(SFRestRequestFailBlock)failureBlock successBlock:(SFRestBatchResponseBlock)successBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">Batch request to be sent.</Abstract>
				</Parameter><Parameter>
					<Name>failureBlock</Name>
					<Abstract type="html">Block to be executed when the request fails (timeout, cancel, or error).</Abstract>
				</Parameter><Parameter>
					<Name>successBlock</Name>
					<Abstract type="html">Block to be executed when the request successfully completes.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendBatchRequest:failureBlock:successBlock:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForOwnedFilesList:page:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a Request that can fetch a page from the files owned by the
specified user.</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForOwnedFilesList:(nullable NSString *)userId page:(NSUInteger)page apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>userId</Name>
					<Abstract type="html">if nil the context user is used, otherwise it should be an Id of a user.</Abstract>
				</Parameter><Parameter>
					<Name>page</Name>
					<Abstract type="html">if nil fetches the first page, otherwise fetches the specified page.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SFRestRequest that can be used to fetch this data.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForOwnedFilesList:page:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForFilesInUsersGroups:page:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a Request that can fetch a page from the list of files from groups
that the user is a member of.</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForFilesInUsersGroups:(nullable NSString *)userId page:(NSUInteger)page apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>userId</Name>
					<Abstract type="html">if nil the context user is used, otherwise it should be an Id of a user.</Abstract>
				</Parameter><Parameter>
					<Name>page</Name>
					<Abstract type="html">if nil fetches the first page, otherwise fetches the specified page.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SFRestRequest that can be used to fetch this data.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForFilesInUsersGroups:page:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForFilesSharedWithUser:page:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a Request that can fetch a page from the list of files that have
been shared with the user.</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForFilesSharedWithUser:(nullable NSString *)userId page:(NSUInteger)page apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>userId</Name>
					<Abstract type="html">if nil the context user is used, otherwise it should be an Id of a user.</Abstract>
				</Parameter><Parameter>
					<Name>page</Name>
					<Abstract type="html">if nil fetches the first page, otherwise fetches the specified page.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SFRestRequest that can be used to fetch this data.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForFilesSharedWithUser:page:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForFileDetails:forVersion:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a Request that can fetch the file details of a particular version
of a file.</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForFileDetails:(NSString *)sfdcId forVersion:(nullable NSString *)version apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>sfdcId</Name>
					<Abstract type="html">The Id of the file</Abstract>
				</Parameter><Parameter>
					<Name>version</Name>
					<Abstract type="html">if nil fetches the most recent version, otherwise fetches this specific version.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SFRestRequest that can be used to fetch this data.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForFileDetails:forVersion:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForBatchFileDetails:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a request that can fetch the latest file details of one or more
files in a single request.</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForBatchFileDetails:(NSArray&lt;NSString*&gt; *)sfdcIds apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>sfdcIds</Name>
					<Abstract type="html">The list of file Ids to fetch.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SFRestRequest that can be used to fetch this data</Abstract></ReturnValue>
			<Anchor>//api/name/requestForBatchFileDetails:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForFileRendition:version:renditionType:page:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a Request that can fetch the a preview/rendition of a particular
page of the file (and version).</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForFileRendition:(NSString *)sfdcId version:(nullable NSString *)version renditionType:(NSString *)renditionType page:(NSUInteger)page apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>sfdcId</Name>
					<Abstract type="html">The Id of the file.</Abstract>
				</Parameter><Parameter>
					<Name>version</Name>
					<Abstract type="html">if nil fetches the most recent version, otherwise fetches this specific version</Abstract>
				</Parameter><Parameter>
					<Name>renditionType</Name>
					<Abstract type="html">What format of rendition do you want to get</Abstract>
				</Parameter><Parameter>
					<Name>page</Name>
					<Abstract type="html">which page to fetch, pages start at 0.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SFRestRequest that can be used to fetch this data.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForFileRendition:version:renditionType:page:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForFileContents:version:apiVersion:</TokenIdentifier>
			<Abstract type="html">Builds a request that can fetch the actual binary file contents of this
particular file.</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForFileContents:(NSString *)sfdcId version:(nullable NSString *)version apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>sfdcId</Name>
					<Abstract type="html">The Id of the file.</Abstract>
				</Parameter><Parameter>
					<Name>version</Name>
					<Abstract type="html">The version of the file.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SFRestRequest that can be used to fetch this data.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForFileContents:version:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForFileShares:page:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a request that can fetch a page from the list of entities that this
file is shared to.</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForFileShares:(NSString *)sfdcId page:(NSUInteger)page apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>sfdcId</Name>
					<Abstract type="html">The Id of the file.</Abstract>
				</Parameter><Parameter>
					<Name>page</Name>
					<Abstract type="html">if nil fetches the first page, otherwise fetches the specified page.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SFRestRequest that can be used to fetch this data.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForFileShares:page:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForAddFileShare:entityId:shareType:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a request that will add a file share for the specified fileId to
the specified entityId.</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForAddFileShare:(NSString *)fileId entityId:(NSString *)entityId shareType:(NSString *)shareType apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>fileId</Name>
					<Abstract type="html">the Id of the file being shared.</Abstract>
				</Parameter><Parameter>
					<Name>entityId</Name>
					<Abstract type="html">the Id of the entity to share the file to (e.g. a user or a group).</Abstract>
				</Parameter><Parameter>
					<Name>shareType</Name>
					<Abstract type="html">the type of share (V - View, C - Collaboration).</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SFRestRequest that be can used to create this share.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForAddFileShare:entityId:shareType:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForDeleteFileShare:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a request that will delete the specified file share.</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForDeleteFileShare:(NSString *)shareId apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>shareId</Name>
					<Abstract type="html">The Id of the file share record (aka ContentDocumentLink).</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new SFRestRequest that can be used to delete this share.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForDeleteFileShare:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForUploadFile:name:description:mimeType:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a request that can upload a new file to the server, this will
create a new file at version 1.</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForUploadFile:(NSData *)data name:(NSString *)name description:(NSString *)description mimeType:(NSString *)mimeType apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>data</Name>
					<Abstract type="html">Data to upload to the server.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">The name/title of this file.</Abstract>
				</Parameter><Parameter>
					<Name>description</Name>
					<Abstract type="html">A description of the file.</Abstract>
				</Parameter><Parameter>
					<Name>mimeType</Name>
					<Abstract type="html">The mime-type of the file, if known.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A SFRestRequest that can perform this upload.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForUploadFile:name:description:mimeType:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForProfilePhotoUpload:fileName:mimeType:userId:apiVersion:</TokenIdentifier>
			<Abstract type="html">Build a request that can upload a new profile photo to the server</Abstract>
			<DeclaredIn>SFRestAPI+Files.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForProfilePhotoUpload:(NSData *)data fileName:(NSString *)fileName mimeType:(NSString *)mimeType userId:(NSString *)userId apiVersion:(nullable NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>data</Name>
					<Abstract type="html">Data to upload to the server.</Abstract>
				</Parameter><Parameter>
					<Name>fileName</Name>
					<Abstract type="html">The name of this file.</Abstract>
				</Parameter><Parameter>
					<Name>mimeType</Name>
					<Abstract type="html">The mime-type of the file, if known.</Abstract>
				</Parameter><Parameter>
					<Name>userId</Name>
					<Abstract type="html">The id of the user to update.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A SFRestRequest that can perform this upload.</Abstract></ReturnValue>
			<Anchor>//api/name/requestForProfilePhotoUpload:fileName:mimeType:userId:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/sanitizeSOSLSearchTerm:</TokenIdentifier>
			<Abstract type="html">The search term to be sanitized.</Abstract>
			<DeclaredIn>SFRestAPI+QueryBuilder.h</DeclaredIn>
			
			<Declaration>+ (NSString *)sanitizeSOSLSearchTerm:(NSString *)searchTerm</Declaration>
			<Parameters>
				<Parameter>
					<Name>searchTerm</Name>
					<Abstract type="html">The search term to be sanitized.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">SOSL-safe version of search term</Abstract></ReturnValue>
			<Anchor>//api/name/sanitizeSOSLSearchTerm:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/SOSLSearchWithSearchTerm:objectScope:</TokenIdentifier>
			<Abstract type="html">Generate a SOSL search.</Abstract>
			<DeclaredIn>SFRestAPI+QueryBuilder.h</DeclaredIn>
			
			<Declaration>+ (nullable NSString *)SOSLSearchWithSearchTerm:(NSString *)term objectScope:(nullable NSDictionary&lt;NSString*,NSString*&gt; *)objectScope</Declaration>
			<Parameters>
				<Parameter>
					<Name>term</Name>
					<Abstract type="html">- the search term. This is sanitized for proper characters</Abstract>
				</Parameter><Parameter>
					<Name>objectScope</Name>
					<Abstract type="html">- nil to search all searchable objects, or a dictionary where each key is an sObject name
and each value is a string with the fieldlist and (optional) where, order by, and limit clause for that object.
or NSNull to not specify any fields/clauses for that object</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">query or nil if a query could not be generated</Abstract></ReturnValue>
			<Anchor>//api/name/SOSLSearchWithSearchTerm:objectScope:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/SOSLSearchWithSearchTerm:fieldScope:objectScope:limit:</TokenIdentifier>
			<Abstract type="html">Generate a SOSL search.</Abstract>
			<DeclaredIn>SFRestAPI+QueryBuilder.h</DeclaredIn>
			
			<Declaration>+ (nullable NSString *)SOSLSearchWithSearchTerm:(NSString *)term fieldScope:(nullable NSString *)fieldScope objectScope:(nullable NSDictionary&lt;NSString*,NSString*&gt; *)objectScope limit:(NSInteger)limit</Declaration>
			<Parameters>
				<Parameter>
					<Name>term</Name>
					<Abstract type="html">- the search term. This is sanitized for proper characters</Abstract>
				</Parameter><Parameter>
					<Name>fieldScope</Name>
					<Abstract type="html">- nil OR the SOSL scope, e.g. &quot;IN ALL FIELDS&quot;. if nil, defaults to &quot;IN NAME FIELDS&quot;</Abstract>
				</Parameter><Parameter>
					<Name>objectScope</Name>
					<Abstract type="html">- nil to search all searchable objects, or a dictionary where each key is an sObject name
and each value is a string with the fieldlist and (optional) where, order by, and limit clause for that object.
or NSNull to not specify any fields/clauses for that object</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">- overall search limit (max 200)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">query or nil if a query could not be generated</Abstract></ReturnValue>
			<Anchor>//api/name/SOSLSearchWithSearchTerm:fieldScope:objectScope:limit:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/SOQLQueryWithFields:sObject:whereClause:limit:</TokenIdentifier>
			<Abstract type="html">Generate a SOQL query.</Abstract>
			<DeclaredIn>SFRestAPI+QueryBuilder.h</DeclaredIn>
			
			<Declaration>+ (nullable NSString *)SOQLQueryWithFields:(NSArray&lt;NSString*&gt; *)fields sObject:(NSString *)sObject whereClause:(nullable NSString *)whereClause limit:(NSInteger)limit</Declaration>
			<Parameters>
				<Parameter>
					<Name>fields</Name>
					<Abstract type="html">- NSArray of fields to select</Abstract>
				</Parameter><Parameter>
					<Name>sObject</Name>
					<Abstract type="html">- object to query</Abstract>
				</Parameter><Parameter>
					<Name>whereClause</Name>
					<Abstract type="html">- nil OR where clause</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">- limit count, or 0 for no limit (for use with query locators)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">query or nil if a query could not be generated</Abstract></ReturnValue>
			<Anchor>//api/name/SOQLQueryWithFields:sObject:whereClause:limit:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/SOQLQueryWithFields:sObject:whereClause:groupBy:having:orderBy:limit:</TokenIdentifier>
			<Abstract type="html">Generate a SOQL query.</Abstract>
			<DeclaredIn>SFRestAPI+QueryBuilder.h</DeclaredIn>
			
			<Declaration>+ (nullable NSString *)SOQLQueryWithFields:(NSArray&lt;NSString*&gt; *)fields sObject:(NSString *)sObject whereClause:(nullable NSString *)whereClause groupBy:(nullable NSArray&lt;NSString*&gt; *)groupBy having:(nullable NSString *)having orderBy:(nullable NSArray&lt;NSString*&gt; *)orderBy limit:(NSInteger)limit</Declaration>
			<Parameters>
				<Parameter>
					<Name>fields</Name>
					<Abstract type="html">- NSArray of fields to select</Abstract>
				</Parameter><Parameter>
					<Name>sObject</Name>
					<Abstract type="html">- object to query</Abstract>
				</Parameter><Parameter>
					<Name>whereClause</Name>
					<Abstract type="html">- nil OR where clause</Abstract>
				</Parameter><Parameter>
					<Name>groupBy</Name>
					<Abstract type="html">- nil OR NSArray of strings, each string is an individual group by clause</Abstract>
				</Parameter><Parameter>
					<Name>having</Name>
					<Abstract type="html">- nil OR having clause</Abstract>
				</Parameter><Parameter>
					<Name>orderBy</Name>
					<Abstract type="html">- nil OR NSArray of strings, each string is an individual order by clause</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">- limit count, or 0 for no limit (for use with query locators)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">query or nil if a query could not be generated</Abstract></ReturnValue>
			<Anchor>//api/name/SOQLQueryWithFields:sObject:whereClause:groupBy:having:orderBy:limit:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/setActiveRequests:</TokenIdentifier>
			<Abstract type="html">Active requests property.</Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong, nonnull) SFSDKSafeMutableSet *activeRequests</Declaration>
			
			
			<Anchor>//api/name/activeRequests</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/activeRequests</TokenIdentifier>
			<Abstract type="html">Active requests property.</Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong, nonnull) SFSDKSafeMutableSet *activeRequests</Declaration>
			
			
			<Anchor>//api/name/activeRequests</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFRestAPI/activeRequests</TokenIdentifier>
			<Abstract type="html">Active requests property.</Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong, nonnull) SFSDKSafeMutableSet *activeRequests</Declaration>
			
			
			<Anchor>//api/name/activeRequests</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/setRequiresAuthentication:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL requiresAuthentication</Declaration>
			
			
			<Anchor>//api/name/requiresAuthentication</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requiresAuthentication</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL requiresAuthentication</Declaration>
			
			
			<Anchor>//api/name/requiresAuthentication</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFRestAPI/requiresAuthentication</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL requiresAuthentication</Declaration>
			
			
			<Anchor>//api/name/requiresAuthentication</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/setInstrumentationDelegateInternal:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong) id&lt;SFRestRequestDelegate&gt; instrumentationDelegateInternal</Declaration>
			
			
			<Anchor>//api/name/instrumentationDelegateInternal</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/instrumentationDelegateInternal</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong) id&lt;SFRestRequestDelegate&gt; instrumentationDelegateInternal</Declaration>
			
			
			<Anchor>//api/name/instrumentationDelegateInternal</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFRestAPI/instrumentationDelegateInternal</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, strong) id&lt;SFRestRequestDelegate&gt; instrumentationDelegateInternal</Declaration>
			
			
			<Anchor>//api/name/instrumentationDelegateInternal</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/removeActiveRequestObject:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>- (void)removeActiveRequestObject:(nonnull SFRestRequest *)request</Declaration>
			
			
			<Anchor>//api/name/removeActiveRequestObject:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/forceTimeoutRequest:</TokenIdentifier>
			<Abstract type="html">Force a request to timeout: for testing only!</Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>- (BOOL)forceTimeoutRequest:(nonnull SFRestRequest *)req</Declaration>
			<Parameters>
				<Parameter>
					<Name>req</Name>
					<Abstract type="html">The request to force a timeout on, or nil to grab any active request and force it to timeout</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if we were able to find and timeout the request, NO if the request could not be found</Abstract></ReturnValue>
			<Anchor>//api/name/forceTimeoutRequest:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/computeAPIVersion:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>- (nonnull NSString *)computeAPIVersion:(nullable NSString *)apiVersion</Declaration>
			
			
			<Anchor>//api/name/computeAPIVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFRestAPI/removeSharedInstanceWithUser:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFRestAPI+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)removeSharedInstanceWithUser:(nonnull SFUserAccount *)user</Declaration>
			
			
			<Anchor>//api/name/removeSharedInstanceWithUser:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForNotificationsStatus:</TokenIdentifier>
			<Abstract type="html">Returns a request to fetch the status of notifications, including unread and unseen count.</Abstract>
			<DeclaredIn>SFRestAPI+Notifications.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForNotificationsStatus:(NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForNotificationsStatus:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFRestAPI/requestForNotification:apiVersion:</TokenIdentifier>
			<Abstract type="html">Returns a request to fetch the given notification.</Abstract>
			<DeclaredIn>SFRestAPI+Notifications.h</DeclaredIn>
			
			<Declaration>- (SFRestRequest *)requestForNotification:(NSString *)notificationId apiVersion:(NSString *)apiVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>notificationId</Name>
					<Abstract type="html">ID of notification to fetch.</Abstract>
				</Parameter><Parameter>
					<Name>apiVersion</Name>
					<Abstract type="html">API version.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestForNotification:apiVersion:</Anchor>
            <NodeRef refid="33"/>
		</Token>
		
        
        
	</File>
</Tokens>