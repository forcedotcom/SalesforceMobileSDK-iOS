fastlane_require 'nokogiri'

before_all do
  setup_circle_ci
end

ENV['DEVICE'] = 'iPhone 8' unless ENV.has_key?('DEVICE')
ENV['SCHEME'] = 'UnitTests' unless ENV.has_key?('SCHEME')
ENV['IOS_VERSION'] = ' (11.2)' unless ENV.has_key?('IOS_VERSION')
$Jenkins = ENV.has_key?('JENKINS_URL')

$GITPRAPI = "https://api.github.com/repos/%s/SalesforceMobileSDK-iOS/pulls/%s/files"
$schemes = ['SalesforceAnalytics', 'SalesforceHybridSDK', 'SalesforceReact', 'SalesforceSDKCore', 'SmartStore', 'SmartSync', 'SalesforceSwiftSDK']
$schemesWithUnitTests = Array.new($schemes)
$schemesWithUnitTests.push("UnitTests")

system('/usr/libexec/PlistBuddy -c \"add :ConnectHardwareKeyboard bool 0\" ~/Library/Preferences/com.apple.iphonesimulator.plist || /usr/libexec/PlistBuddy -c \"set :ConnectHardwareKeyboard 0\" ~/Library/Preferences/com.apple.iphonesimulator.plist')
system('rm -r $HOME/Library/Developer/Xcode/DerivedData/SalesforceMobileSDK-*')

def combinePackagesOfXML(toFile, files)
  toDoc = Nokogiri::XML(File.open(toFile))
  packageNode = toDoc.xpath('//packages/package')
  packageNode = packageNode[packageNode.size-1] #get last package node

  for fromfile in files
    fromDoc = Nokogiri::XML(File.open(fromfile))
    packages = fromDoc.xpath('//packages/package')
    for package in packages
      packageNode.add_next_sibling(package)
    end
  end
  File.write(toFile, toDoc.to_xml)
end

def testScheme(scheme)
  begin
    xcodebuild(
        xcargs: "CLANG_ANALYZER_OUTPUT=plist-html CLANG_ANALYZER_OUTPUT_DIR=./clangReport RUN_CLANG_STATIC_ANALYZER=YES",
        workspace: "SalesforceMobileSDK.xcworkspace",
        scheme: scheme,
        sdk: "iphonesimulator",
        )
  ensure
    #move clangReports to one folder
    system("mkdir -p ../clangReport/StaticAnalyzer")
    system("mv ../libs/SalesforceAnalytics/clangReport/StaticAnalyzer/SalesforceAnalytics ../clangReport/StaticAnalyzer/")
    system("mv ../libs/SalesforceHybridSDK/clangReport/StaticAnalyzer/SalesforceHybridSDK ../clangReport/StaticAnalyzer/")
    system("mv ../libs/SalesforceReact/clangReport/StaticAnalyzer/SalesforceReact ../clangReport/StaticAnalyzer/")
    system("mv ../libs/SalesforceSDKCore/clangReport/StaticAnalyzer/SalesforceSDKCore ../clangReport/StaticAnalyzer/")
    system("mv ../libs/SmartStore/clangReport/StaticAnalyzer/SmartStore ../clangReport/StaticAnalyzer/")
    system("mv ../libs/SmartSync/clangReport/StaticAnalyzer/SmartSync ../clangReport/StaticAnalyzer/")
  end

  begin
    scan(
        workspace: "SalesforceMobileSDK.xcworkspace",
        scheme: scheme,
        device: ENV['DEVICE'] + ENV['IOS_VERSION'],
        output_directory: "test_output",
        code_coverage: true,
        clean: true
    )
  ensure
    system('cp ../test_output/report.junit ../test_output/results.xml')

    xcov(
        workspace: "SalesforceMobileSDK.xcworkspace",
        scheme: scheme,
        output_directory: "xcov_output",
        exclude_targets: "CocoaLumberjack.framework,SalesforceSDKCoreTestApp.app,SmartStoreTestApp.app,SmartSyncTestApp.app,SalesforceHybridSDKTestApp.app,SalesforceAnalyticsTestApp.app,RestAPIExplorer.app,AccountEditor.app,NoteSync.app,SmartSyncExplorerHybrid.app,SmartSyncExplorer.app,SmartSyncExplorerCommon.framework,RecentContactsTodayExtension.appex,Cordova.framework,SalesforceReact.framework,PromiseKit.framework,SalesforceSwiftSDKTestApp.app,SalesforceReactTestApp.app"
    )

    schemes = [scheme]
    if scheme.include?("UnitTests")
      schemes = $schemes
    end
    for oneScheme in schemes
      begin
        slather(
            workspace: "SalesforceMobileSDK.xcworkspace",
            scheme: oneScheme,
            output_directory: "slather_output_temp/#{oneScheme}",
            html: true,
            jenkins: $Jenkins,
            cobertura_xml: true,
            ignore: ["../*", "external/*"],
            proj: "./libs/%s/%s.xcodeproj" %[oneScheme, oneScheme],
            verbose: true
        )
      rescue => ex
        UI.error(ex)
      end
    end

    system("mkdir -p ../slather_output")
    desFile = "../slather_output/cobertura.xml"
    system("rm #{desFile}") #remove existing file first
    coberturaXmls = Dir["../slather_output_temp/**/cobertura*.xml"]
    mergeFiles = Array.new
    for i in 0..coberturaXmls.size-1
      coberturaXml = coberturaXmls[i]
      if i == 0
        system("cp #{coberturaXml} #{desFile}")
      else
        mergeFiles.push(coberturaXml)
      end
    end
    combinePackagesOfXML(desFile, mergeFiles)

    if scheme == 'SalesforceSwiftSDK' || scheme == 'UnitTests'
      system('brew install swiftlint')
      swiftlint(
          mode: :lint,
          output_file: "swiftlint.result.json",
          reporter: "json",
         ignore_exit_status: true
      )
    end
  end
end

lane :PR do |options|
  Dir.chdir('../')
  schemes = Set.new

  # Determine CI platform or exit
  if $Jenkins
    # This should fix the issue of rebuilding PRs on jenkins not actually working, just rebuild with
    # the sha1 from the original PR build. e.g. "origin/pr/2384/merge"
    pr_id = ENV.has_key?('ghprbPullId') ? ENV['ghprbPullId'] : ENV['sha1'].split('/')[2]
    prFilesAPI = $GITPRAPI % ['forcedotcom', pr_id]
    curlCommand = "curl %s -H 'Authorization: token %s'" % [prFilesAPI, ENV['gitToken']]
    pullfiles = `#{curlCommand}`
  elsif ENV.has_key?('CIRCLE_PULL_REQUEST')
    # No PR Number indicates that this PR is running in a CircleCI env linked to a fork, so force the url to forcedotcom project.
    if ENV.has_key?('CIRCLE_PR_NUMBER')
      prFilesAPI = $GITPRAPI % [ENV['CIRCLE_PROJECT_USERNAME'], ENV['CIRCLE_PR_NUMBER']]
    else
      prFilesAPI = $GITPRAPI % ['forcedotcom', ENV['CIRCLE_PULL_REQUEST'].split('/').last]
    end
    pullfiles = `#{"curl %s" % [prFilesAPI]}`
  else
    UI.error 'Not a PR on Jenkins or CircleCI, stopping stop execution now.'
    next
  end

  # Determine which libs have been modified
  prfiles = JSON.parse(pullfiles)
  for prfile in prfiles
    path = prfile["filename"]
    for scheme in $schemes
      if path.include? scheme
        schemes.add(scheme)
      end
    end
  end
  UI.important "Schemes to test: " + schemes.to_a().join(",")
  ENV['LIBS_TO_TEST'] = schemes.to_a().join(",")

  lib_to_test = options[:lib]
  if lib_to_test.nil?
    # The old Jenkins way
    danger(
        danger_id: "PR-Check",
        dangerfile: ".circleci/Dangerfile-PR.rb",
        github_api_token: ENV["DANGER_GITHUB_API_TOKEN"]
    )

    for scheme in schemes
      testScheme(scheme)

      begin
        danger(
            danger_id: "CI-Result-#{scheme}",
            dangerfile: ".circleci/Dangerfile-Lib.rb",
            github_api_token: ENV["DANGER_GITHUB_API_TOKEN"]
        )
      rescue => ex
        UI.error(ex)
      end
    end
  else
    # The new CircleCI way
    if schemes.include? lib_to_test
      testScheme(lib_to_test)
    else
      UI.important "Lib #{lib_to_test} not modified by this PR, no need to test."
    end
  end
end

lane :LCL do
  Dir.chdir('../')
  index = 1
  puts "Select scheme:"
  for scheme in $schemesWithUnitTests
    puts index.to_s + ": " + scheme
    index = index + 1
  end

  print "Just enter a number:"
  selection = STDIN.gets.strip
  testScheme($schemesWithUnitTests[selection.to_i-1])
end

lane :CI do
  Dir.chdir('../')
  testScheme("UnitTests")
end