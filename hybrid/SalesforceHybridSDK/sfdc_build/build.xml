<project name="SalesforceHybridSDK" default="all">
    <import file="../../../shared/build.xml"/>

    <property environment="env"/>
    <property id="target.name" name="target.name" value="${ant.project.name}"/>
    <property name="project.dir" value=".."/>
    <property name="artifacts.dir" location="artifacts"/>
    <property name="dependency.dir" value="../../dependencies"/>
    <property name="dist.dir" location="../../../dist"/>
      
    <property id="platform.iphoneos" name="platform.iphoneos" value="iphoneos"/>
    <property id="platform.iphonesimulator" name="platform.iphonesimulator" value="iphonesimulator"/>

    <property id="sdk.iphoneos" name="sdk.iphoneos" value="${platform.iphoneos}"/>
    <property id="sdk.iphonesimulator" name="sdk.iphonesimulator" value="${platform.iphonesimulator}"/>

    <property id="configuration.debug" name="configuration.debug" value="Debug"/>
    <property id="configuration.release" name="configuration.release" value="Release"/>

    <!-- main -->
    <target name="pre"
		depends="initArtifacts,ensureDependencies"/>

    <target name="initArtifacts">
        <mkdir dir="${artifacts.dir}"/>
    </target>

	<target name="ensureDependencies"
		depends="iOSShared.dependency.callback-ios, iOSShared.dependency.oauth"
		/>

	<target name="cleanDependencies"
		depends="iOSShared.dependency.callback-ios.clean, iOSShared.dependency.oauth.clean"
		/>
	
	<target name="all" depends="pre,utest,buildDist" description="do it all">
   </target>

	<target name="buildDist" depends="pre" description="build debug and release zips">
		<antcall target="compileRelease" />
		<antcall target="compileDebug" />
		<delete dir="${project.dir}/build"/>
	</target>

   <target name="install" depends="pre" description="create fresh install artifacts" >
      <antcall target="compileDebug" />
      <delete dir="${project.dir}/build"/>
   </target>


    <target name="utest" depends="pre"
	 description="runs unit tests in simulator">
        
		
        <!-- get the latest iphonesimulator location -->
        <exec executable="xcodebuild" outputproperty="latestSimSDKPath">
            <arg line="xcodebuild -version -sdk iphonesimulator Path"/>
        </exec>
        
        <antcall target="runTestTarget">
            <param name="sdkPath" value="${latestSimSDKPath}" />
        </antcall>
    </target>
    
    <target name="runTestTarget" description="build and run test target" >
		<property name="covConfig" value="Coverage" />
	
		<!-- /Users/tstellanova/proj/got/ios-sdk-dev17/hybrid/SalesforceHybridSDK/build/Debug-iphonesimulator -->
		<property name="config_build_dir" value="${project.dir}/build/SalesforceHybridSDK.build/${covConfig}-iphonesimulator" />
		<property name="cov_output_dir" value="${config_build_dir}/SalesforceHybridSDK.build/Objects-normal/i386/" />		
		
        <echo message="sdkPath is: ${sdkPath}" />
        <echo message="cov_output_dir is: ${cov_output_dir}" />
        
        <exec executable="mktemp" outputproperty="tmp_home">
            <arg value="-d"/> <!-- create a temp _d_irectory -->
            <arg value="-t"/> <!-- template -->
            <arg value="unittests"/>
        </exec>
        <echo message="Created temp Home at ${tmp_home}"/>
        
        <echo message="Stopping any stale securityd ..."/>
        <exec failonerror="false" executable="launchctl">
            <arg line="remove RunIPhoneLaunchDaemons"/>
        </exec>
        

        <echo message="Starting securityd ... "/>
        <!-- some daemons are necessary for the iPhone to work, e.g. keychain -->
        <exec failonerror="true" executable="launchctl">
            <arg value="submit"/>
            <arg value="-l"/>
            <arg value="RunIPhoneLaunchDaemons"/>
            <arg value="--"/>
            <arg file="${basedir}/RunIPhoneLaunchDaemons.sh"/>
            <arg value="${sdkPath}"/> <!-- $IPHONE_SIMULATOR_ROOT -->
            <arg value="${tmp_home}"/> <!-- $CFFIXED_USER_HOME -->
        </exec>
       

		<delete dir="${config_build_dir}" />
		<mkdir dir="${cov_output_dir}" />
		
        <!-- build and run the actual test target -->
        <exec executable="xcodebuild" failonerror="false" resultproperty="utestResult" >
            <arg line="-project ${project.dir}/${target.name}.xcodeproj -target TestPluginsTests -configuration ${covConfig}  -sdk iphonesimulator build" />
        </exec>

        <echo message="Stopping securityd ..."/>
        <exec failonerror="false" executable="launchctl">
            <arg line="remove RunIPhoneLaunchDaemons"/>
        </exec>

		<!-- verify that the utestResult is zero (no error)
		We do this AFTER stopping securityd, exiting app -->
					
		<fail message="Unit tests failed with error: '${utestResult}'">
			<condition>
				<not>
					<equals arg1="${utestResult}" arg2="0" />
				</not>
			</condition>
		</fail>
		
		<!-- gcda files are temporary stored in ${cov_output_dir} -->
		<property name="abs_cov_output_dir" location="${cov_output_dir}"/>
		<echo message="gcda files are stored in: ${abs_cov_output_dir} " />
		<property name="abs_source_dir" location="${project.dir}"/>	
		<echo message="abs_source_dir is: ${abs_source_dir} " />
		
	<!-- gcda coverage files are now output to ${abs_cov_output_dir} -->
		<antcall target="iOSShared.covreport_text">
			<param name="inputPath" value="${abs_cov_output_dir}" />
			<param name="outputPath" value="${artifacts.dir}" />
			<param name="rootPath" value="${abs_source_dir}" />
			<param name="excludePattern" value=".*/sqlite/.*" />
		</antcall> 
		<antcall target="iOSShared.covreport">
			<param name="inputPath" value="${abs_cov_output_dir}" />
			<param name="outputPath" value="${artifacts.dir}" />
			<param name="rootPath" value="${abs_source_dir}" />
			<param name="excludePattern" value=".*/sqlite/.*" />
		</antcall>

        

    </target>
    

    <target name="createDistribution" >
		<property name="configuration" value="${configuration.debug}" />
		<property name="results.dir" value="${artifacts.dir}/${configuration}-iphoneos/${target.name}" />
        <antcall target="iOSShared.compile_no_install">
            <param name="configuration" value="${configuration}"/>
            <param name="sdk" refid="sdk.iphoneos"/>
            <param name="target" value="SalesforceHybridSDK"/>
        </antcall>

		<!-- move the build products somewhere that compress can pick it up -->
		<delete dir="${artifacts.dir}/${configuration}-iphoneos" failonerror="false" />
    	<mkdir dir="${results.dir}"/>
		<move todir="${results.dir}/${target.name}.framework" >
			<fileset dir="${project.dir}/build/${configuration}-iphoneos/${target.name}.embeddedframework/${target.name}.framework"/>
        </move>
		
		<!-- copy over www resources as well -->
		<copy todir="${results.dir}/shared-www" >
			<fileset dir="${project.dir}/../../external/shared/PhoneGap">
				<not>
				<filename name="**/*TestSuite*"/>
				</not>
			</fileset>
		</copy>
		<copy todir="${results.dir}/shared-www"
		    file="${project.dir}/../../external/shared/forcetk.js" />
		
		<delete file="${artifacts.dir}/${target.name}-${configuration}.zip" failonerror="false" />
		<delete file="${dist.dir}/${target.name}-${configuration}.zip" failonerror="false" />
		
		<!-- compress the whole enchilada -->
        <antcall target="iOSShared.compress">
              <param name="destfile" value="${artifacts.dir}/${target.name}-${configuration}.zip"/>
              <param name="basedir" value="${results.dir}"/>
        </antcall>
	
		<!-- Copy the zip product to the distribution dir -->
		<copy todir="${dist.dir}/${target.name}"
		    file="${artifacts.dir}/${target.name}-${configuration}.zip" />
		
    </target>


    <target name="compileDebug" depends="pre">
		<antcall target="createDistribution">
			<param name="configuration" value="${configuration.debug}" />
        </antcall>
    </target>

    <target name="compileRelease" depends="pre">
		<antcall target="createDistribution">
			<param name="configuration" value="${configuration.release}" />
        </antcall>
    </target>

 
 
    <target name="clean">
		<delete dir="${project.dir}/build" failonerror="false" />
        <delete dir="${dependency.dir}/${target.name}/${target.name}.framework" failonerror="false" />
        <delete dir="${dist.dir}/${target.name}" failonerror="false" />
        <delete dir="${artifacts.dir}" failonerror="false" />
    </target>

    <target name="clean.full"
        depends="clean, cleanDependencies">
    </target>

</project>
