#!/bin/bash
# Note: we cloned this from the default scripts included with xcode. This avoids
# having to modify the dev's xcode install 
##
# Copyright 2005-2010 Apple Inc.
# All rights reserved.
#
# This script runs all of the unit tests for the target test bundle specified by the passed-in environment by way of a corresponding script in the current platform's tools directory.
##
#
# Input:
#   ACTION - the build action being invoked (must be "build" to run tests)
#   ARCHS (optional) - the architectures the tests were built for, normally set but
#                      otherwise derived from /usr/bin/arch
#   VALID_ARCHS (optional) - the architectures the tests can be run for, normally set
#                            but otherwise derived from /usr/bin/arch
#   NATIVE_ARCH_ACTUAL (optional) - the actual architecture of the hardware running
#                                   the tests, normally set but otherwise derived from
#                                   /usr/bin/arch
#   CURRENT_ARCH (optional) - Xcode's Active Architecture, normally set but otherwise
#                             derived from /usr/bin/arch
#   ONLY_ACTIVE_ARCH (optional) - if YES, only run tests for CURRENT_ARCH
#   TEST_HOST (optional) - the host application to inject the tests into, normally unset
#   TEST_BUNDLE_PATH (optional) - the path of the test bundle to be tested, normally derived
#   TEST_RIG (optional) - the test rig to use, normally derived
#   OTHER_TEST_FLAGS (optional) - additional arguments to pass to the test rig before bundle
#   OTEST (optional) - path to the otest test rig
#   CPLUSTESTRIG (optional) - path to the CPlusTest test rig
#   DEVELOPER_DIR - The path to the Xcode folder
#   BUILT_PRODUCTS_DIR - the directory containing built products
#   PRODUCT_NAME - the name of the test bundle to be used
#   WRAPPER_EXTENSION - the wrapper extension of the test bundle to be used (octest or cptest)
#   DEVELOPER_LIBRARY_DIR - developer tools library path
#   GCC_ENABLE_OBJC_GC - whether Objective-C GC is unsupported (default), supported, or required

Message() {
# usage: Message line type message
# Echo the message to stdout as the given type of message and continue
    echo "${DEVELOPER_DIR}/Tools/SFRunAppUnitTests:${1}: ${2}: ${3}"
}

Note() {
# usage: Notify line message
# Echo the message to stdout as a note and continue
    Message "${1}" note "${2}"
}

Warning() {
# usage: Warning line message
# Echo the message to stdout as a note and continue
    Message "${1}" warning "${2}"
}

Error() {
# usage: Notify line message
# Echo the message to stdout as an error and continue
    Message "${1}" error "${2}"
}

Fail() {
# usage: Fail line message
# Echo the message to stdout and return 1, the universal error code
    Error "${1}" "${2}"
    exit 1
}

### Don't run if TEST_AFTER_BUILD is NO

if [ "${TEST_AFTER_BUILD}" = "NO" ]; then
    Note ${LINENO} "SFRunAppUnitTests exited without running tests because TEST_AFTER_BUILD was set to NO."
    exit 0
fi

### Set up minimum environment required for execution

if [ "${DEVELOPER_DIR}" = "" ]; then
    DEVELOPER_DIR=/Developer
    Warning ${LINENO} "DEVELOPER_DIR not set; assuming /Developer"
fi

if [ "${DEVELOPER_TOOLS_DIR}" = "" ]; then
    DEVELOPER_TOOLS_DIR="${DEVELOPER_DIR}/Tools"
fi

if [ "${PLATFORM_DEVELOPER_TOOLS_DIR}" = "" ]; then
    if [ ! "${PLATFORM_DIR}" = "" ]; then
        Fail ${LINENO} "PLATFORM_DIR is ${PLATFORM_DIR}, but PLATFORM_DEVELOPER_TOOLS_DIR isn\'t set."
    else
        # Assume MacOSX platform
        PLATFORM_DEVELOPER_TOOLS_DIR="${DEVELOPER_TOOLS_DIR}"
    fi
fi

### Find and invoke platform-specific SFRunAppUnitTests

runPlatformUnitTests="`dirname $0`/SFRunPlatformUnitTests"
if [ -x "${runPlatformUnitTests}" ]; then
    # Invoke the platform-specific SFRunAppUnitTests
    exec "${runPlatformUnitTests}" "$@"
else
    if [ -f "${runPlatformUnitTests}" ]; then
        Fail ${LINENO} "Cannot execute ${runPlatformUnitTests}"
    else
        Fail ${LINENO} "Unit testing script not found at ${runPlatformUnitTests}"
    fi
fi
exit 0

